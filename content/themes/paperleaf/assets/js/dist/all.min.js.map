{"version":3,"sources":["main.js","plugins.js"],"names":["sidebarHeight","innerHeight","jQuery","height","footerHeight","window","addClass","removeClass","$","selectors","check_binded","check_lock","defaults","interval","force_process","$window","$prior_appeared","process","selector","index","selectorsLength","length","$disappeared","$appeared","filter","this","is","trigger","not","expr","pseudos","appeared","createPseudo","arg","element","$element","window_left","scrollLeft","window_top","scrollTop","offset","left","top","data","width","fn","extend","appear","options","on_check","opts","setTimeout","scroll","resize","push","force_appear","module","require","fitVids","head","div","settings","customSelector","ignore","document","getElementById","getElementsByTagName","createElement","innerHTML","appendChild","childNodes","each","ignoreList","$allVideos","find","join","aspectRatio","videoName","$this","parents","tagName","toLowerCase","parent","css","isNaN","attr","parseInt","_count","wrap","removeAttr","Zepto","root","factory","global","step2list","step3list","v","C","re_mgr0","re_mgr1","re_meq1","re_s_v","re_1a","re2_1a","re_1b","re2_1b","re_1b_2","re2_1b_2","re3_1b_2","re4_1b_2","re_1c","re_2","re_3","re_4","re2_4","re_5","re_5_1","re3_5","lunr","config","builder","Builder","pipeline","add","trimmer","stopWordFilter","stemmer","searchPipeline","call","build","porterStemmer","w","suffix","firstch","re3","re4","re","stem","re2","fp","substr","toUpperCase","test","replace","exec","version","utils","warn","message","console","asString","obj","toString","FieldRef","docRef","fieldName","stringValue","_stringValue","joiner","fromString","s","n","indexOf","fieldRef","slice","prototype","undefined","idf","posting","documentCount","documentsWithTerm","Object","keys","x","Math","log","abs","Token","str","metadata","update","clone","tokenizer","Array","isArray","map","t","trim","len","tokens","sliceEnd","sliceStart","sliceLength","charAt","match","separator","position","Pipeline","_stack","registeredFunctions","create","registerFunction","label","warnIfFunctionNotRegistered","load","serialised","forEach","fnName","Error","arguments","after","existingFn","newFn","pos","splice","before","remove","run","stackLength","i","reduce","memo","token","j","result","concat","runString","reset","toJSON","Vector","elements","_magnitude","positionForIndex","start","end","pivotPoint","floor","pivotIndex","insert","insertIdx","val","upsert","magnitude","sumOfSquares","elementsLength","sqrt","dot","otherVector","dotProduct","a","b","aLen","bLen","aVal","bVal","similarity","toArray","output","ational","tional","enci","anci","izer","bli","alli","entli","eli","ousli","ization","ation","ator","alism","iveness","fulness","ousness","aliti","iviti","biliti","logi","icate","ative","alize","iciti","ical","ful","ness","c","RegExp","generateStopWordFilter","stopWords","words","stopWord","TokenSet","final","edges","id","_nextId","fromArray","arr","finish","fromClause","clause","fromFuzzyString","term","editDistance","stack","node","editsRemaining","noEditNode","char","deletionNode","substitutionNode","insertionNode","charA","charB","transposeNode","frame","pop","wildcardFound","next","prefix","edge","_str","labels","sort","intersect","qNode","qEdges","qLen","nEdges","nLen","q","qEdge","nEdge","previousWord","uncheckedNodes","minimizedNodes","word","commonPrefix","minimize","child","nextNode","downTo","childKey","Index","attrs","invertedIndex","fieldVectors","tokenSet","fields","search","queryString","query","QueryParser","parse","Query","matchingFields","queryVectors","termFieldCache","clauses","terms","usePipeline","m","JSON","stringify","termTokenSet","expandedTerms","expandedTerm","termIndex","_index","k","field","fieldPosting","matchingDocumentRefs","termField","boost","l","fieldMatch","matchingDocumentRef","matchingFieldRef","MatchData","matchingFieldRefs","results","matches","docMatch","fieldVector","score","matchData","combine","ref","serializedIndex","serializedVectors","serializedInvertedIndex","tokenSetBuilder","tuple","_ref","_fields","fieldTermFrequencies","fieldLengths","_b","_k1","metadataWhitelist","number","k1","doc","fieldTerms","metadataKey","calculateAverageFieldLengths","fieldRefs","numberOfFields","accumulator","documentsWithField","averageFieldLength","createFieldVectors","fieldRefsLength","termIdfCache","fieldLength","termFrequencies","termsLength","scoreWithPrecision","tf","round","createTokenSet","use","args","unshift","apply","clonedMetadata","metadataKeys","key","otherMatchData","allFields","wildcard","String","NONE","LEADING","TRAILING","QueryParseError","name","QueryLexer","lexemes","escapeCharPositions","state","lexText","sliceString","subSlices","emit","type","escapeCharacter","EOS","backup","acceptDigitRun","charCode","charCodeAt","more","FIELD","TERM","EDIT_DISTANCE","BOOST","lexField","lexer","lexTerm","lexEditDistance","lexBoost","lexEOS","termSeparator","currentClause","lexemeIdx","parseFieldOrTerm","peekLexeme","consumeLexeme","lexeme","nextClause","completedClause","parser","parseField","parseTerm","errorMessage","possibleFields","f","nextLexeme","parseEditDistance","parseBoost","define","amd","exports","array","getChar","idx","getArrayMember","Levenshtein","str_m","str_n","previous","current","matrix","getElem","_matrix","distance","n_val","n_idx","m_val","m_idx","min","inspect","getMatrix","max","o","buff","sep","row","cell","getSteps","u","d","steps","y","Number","MAX_VALUE","valueOf","ghostHunter","pluginMethods","init","resultsData","onPageLoad","onKeyUp","result_template","info_template","displaySearchInfo","zeroResultsInfo","onComplete","filterfields","subpath","item_preprocessor","indexing_start","indexing_end","includebodysearch","getSubpathKey","settleIDs","newAttr","getAttribute","setAttribute","grabAndIndex","blogData","latestPost","url","ghosthunter_key","params","limit","include","formats","me","get","done","idxSrc","posts","arrayItem","itemDate","Date","updated_at","getTime","tag_arr","tags","meta_description","category","parsedData","title","description","custom_excerpt","pubDate","published_at","tag","plaintext","date","localUrl","getDate","getMonth","getFullYear","link","assign","subpathKey","localStorage","setItem","e","isInit","lastTimeoutID","target","that","loadAPI","focus","closest","submit","preventDefault","keydown","event","which","keyup","getItem","value","clearTimeout","thingsFound","valueSplit","split","ilen","searchResult","jlen","otherRefs","klen","empty","append","format","amount","children","eq","replaceWith","lunrref","postData","listItems","currentRefs","newRefs","apiData","html","step","bind","clear","r","Lightense","getOwnPropertySymbols","getOwnPropertyDescriptor","enumerable","defineProperty","configurable","writable","g","Symbol","iterator","constructor","time","padding","keyboard","cubicBezier","background","zIndex","beforeShow","afterShow","beforeHide","afterHide","Reflect","src","classList","contains","addEventListener","metaKey","ctrlKey","open","scrollY","removeEventListener","Image","onload","pageYOffset","documentElement","pageXOffset","getBoundingClientRect","innerWidth","clientWidth","clientHeight","scaleFactor","p","h","translateX","translateY","className","style","transform","parentNode","insertBefore","container","visibility","opacity","substring","styleSheet","cssText","createTextNode","backgroundColor","replaceChild","keyCode","querySelectorAll","querySelector","body","toStringTag","__esModule","default","hasOwnProperty","ready","$grid","imagesLoaded","masonry","itemSelector","percentPosition","transitionDuration","on","$all_appeared_elements","fadeOut","toggleClass","action","getParameterByName","stripe","location","click","clean_uri","uri","history","replaceState","gallery_images","href","decodeURIComponent","image","ratio","attributes","flex"],"mappings":"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,WAkBAR,EAAA0K,uBAAA,SAAAC,GACA,IAAAC,EAAAD,EAAArE,OAAA,SAAAC,EAAAsE,GAEA,OADAtE,EAAAsE,GAAAA,EACAtE,GACA,IAEA,OAAA,SAAAC,GACA,GAAAA,GAAAoE,EAAApE,EAAAtE,cAAAsE,EAAAtE,WAAA,OAAAsE,IAgBAxG,EAAAO,eAAAP,EAAA0K,uBAAA,CACA,IACA,OACA,QACA,SACA,QACA,MACA,SACA,OACA,KACA,QACA,KACA,MACA,MACA,MACA,KACA,KACA,KACA,UACA,OACA,MACA,KACA,MACA,SACA,QACA,OACA,MACA,KACA,OACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,KACA,MACA,OACA,MACA,MACA,MACA,UACA,IACA,KACA,KACA,OACA,KACA,KACA,MACA,OACA,QACA,MACA,OACA,SACA,MACA,KACA,QACA,OACA,OACA,KACA,UACA,KACA,MACA,MACA,KACA,MACA,QACA,KACA,OACA,KACA,QACA,MACA,MACA,SACA,OACA,MACA,OACA,MACA,SACA,QACA,KACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,KACA,MACA,OACA,KACA,QACA,MACA,KACA,OACA,OACA,OACA,QACA,QACA,QACA,MACA,OACA,MACA,OACA,OACA,QACA,MACA,MACA,SAGA1K,EAAA+E,SAAAI,iBAAAnF,EAAAO,eAAA,kBAqBAP,EAAAM,QAAA,SAAAkG,GACA,OAAAA,EAAA1C,OAAA,SAAApB,GACA,OAAAA,EAAAjB,QAAA,OAAA,IAAAA,QAAA,OAAA,OAIAzB,EAAA+E,SAAAI,iBAAAnF,EAAAM,QAAA,WA2BAN,EAAA8K,SAAA,WACA3Q,KAAA4Q,OAAA,EACA5Q,KAAA6Q,MAAA,GACA7Q,KAAA8Q,GAAAjL,EAAA8K,SAAAI,QACAlL,EAAA8K,SAAAI,SAAA,GAWAlL,EAAA8K,SAAAI,QAAA,EASAlL,EAAA8K,SAAAK,UAAA,SAAAC,GAGA,IAFA,IAAAlL,EAAA,IAAAF,EAAA8K,SAAA3K,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","file":"all.min.js","sourcesContent":["/**\n * Main JS file for Paperleaf behaviours\n */\n\n/* globals jQuery, document */\n(function ($, undefined) {\n  \"use strict\";\n\n  var $document = $(document);\n\n  $document.ready(function () {\n\n    /**\n     * FitVids.js for responsive videos\n     */\n    var $postContent = $(\".post-content\");\n    $postContent.fitVids();\n\n    /**\n     * Masonry grid\n     */\n    var $grid = $('.js-grid').imagesLoaded( function() {\n      $grid.masonry({\n        itemSelector       : '.post',\n        percentPosition    : true,\n        transitionDuration : '0.25s'\n      });\n      $.force_appear();\n    });\n\n    /**\n     * Add class to elements that appear in viewport\n     */\n    $('.post--grid').appear();\n    $('.post--grid').on('appear', function(event, $all_appeared_elements) {\n      $(this).addClass('animate');\n    });\n\n    /**\n     * Preloader\n     */\n    $('body').imagesLoaded( function() {\n      $('.js-loader').fadeOut(250);\n    });\n\n    /**\n     * GhostHunter search\n     */\n    var searchField = $('.search-field').ghostHunter({\n      results: '.content-area',\n      info_template: '<h1 class=\"page-title mt0\">Number of posts found: {{amount}}</h1>',\n      result_template: '<article id=\"gh-{{ref}}\" class=\"animate border-box post--grid gh-search-item\"><div class=\"p3 bg-white box-shadow\"><header class=\"post-header\"><h2 class=\"post-title mt0 mb0 break-word\"><a class=\"black\" href=\"{{link}}\">{{title}}</a></h2></header></div></article>',\n      before: function() {\n        $('.pagination, .content').remove();\n      }\n    });\n\n    /**\n     * Handle sidebar height for phones and tablets\n     */\n    $(window).on('resize', function(event) {\n      sidebarHeight();\n    });\n    sidebarHeight();\n\n    $('.js-toggle-nav').on('click', function(event) {\n      event.preventDefault();\n      $(this).toggleClass('open');\n      $('.js-nav').toggleClass('is-visible');\n    });\n\n    // Give the parameter a variable name\n    var action = getParameterByName('action');\n    var stripe = getParameterByName('stripe');\n    if (action == 'subscribe') {\n      $('body').addClass('subscribe-success');\n    }\n    if (action == 'signup') {\n      window.location = '/signup/?action=checkout';\n    }\n    if (action == 'checkout') {\n      $('body').addClass(\"signup-success\");\n    }\n    if (action == 'signin') {\n      $('body').addClass(\"signin-success\");\n    }\n    if (stripe == 'success') {\n      $('body').addClass(\"checkout-success\");\n    }\n    if (stripe == 'cancel') {\n      $('body').addClass(\"checkout-cancel\");\n    }\n    if (stripe == 'billing-update-success') {\n      $('body').addClass(\"billing-success\");\n    }\n    if (stripe == 'billing-update-cancel') {\n      $('body').addClass(\"billing-cancel\");\n    }\n    $('.notification-close').click(function () {\n      $(this).parent().addClass('close');\n      var uri = window.location.toString();\n      if (uri.indexOf(\"?\") > 0) {\n        var clean_uri = uri.substring(0, uri.indexOf(\"?\"));\n        window.history.replaceState({}, document.title, clean_uri);\n      }\n    });\n\n  });\n\n})(jQuery);\n\nwindow.addEventListener('load', function () {\n  Lightense('.kg-gallery-image img', {\n    padding: 56,\n    offset: 20,\n    background: 'rgba(255, 255, 255, .85)',\n  });\n}, false);\n\nfunction sidebarHeight() {\n  var innerHeight = jQuery('.js-sidebar-inner').height();\n  var footerHeight = jQuery('.js-sidebar-footer').height();\n  var windowHeight = jQuery(window).height();\n  var switchClass = ( innerHeight + footerHeight + 192 ) > windowHeight ? true : false;\n  if ( switchClass ) {\n    jQuery('.js-sidebar-footer').addClass('sidebar-footer-static');\n  } else {\n    jQuery('.js-sidebar-footer').removeClass('sidebar-footer-static');\n  }\n}\n\nvar gallery_images = document.querySelectorAll('.kg-gallery-image img');\ngallery_images.forEach(function (image) {\n  var container = image.closest('.kg-gallery-image');\n  var width = image.attributes.width.value;\n  var height = image.attributes.height.value;\n  var ratio = width / height;\n  container.style.flex = ratio + ' 1 0%';\n});\n\n// Parse the URL parameter\nfunction getParameterByName(name, url) {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n}\n","/*\n * jQuery appear plugin\n *\n * Copyright (c) 2012 Andrey Sidorov\n * licensed under MIT license.\n *\n * https://github.com/morr/jquery.appear/\n *\n * Version: 0.4\n */\n(function($) {\n  var selectors = [];\n\n  var check_binded = false;\n  var check_lock = false;\n  var defaults = {\n    interval: 250,\n    force_process: false\n  };\n  var $window = $(window);\n\n  var $prior_appeared = [];\n\n  function appeared(selector) {\n    return $(selector).filter(function() {\n      return $(this).is(':appeared');\n    });\n  }\n\n  function process() {\n    check_lock = false;\n    for (var index = 0, selectorsLength = selectors.length; index < selectorsLength; index++) {\n      var $appeared = appeared(selectors[index]);\n\n      $appeared.trigger('appear', [$appeared]);\n\n      if ($prior_appeared[index]) {\n        var $disappeared = $prior_appeared[index].not($appeared);\n        $disappeared.trigger('disappear', [$disappeared]);\n      }\n      $prior_appeared[index] = $appeared;\n    }\n  }\n\n  function add_selector(selector) {\n    selectors.push(selector);\n    $prior_appeared.push();\n  }\n\n  // \":appeared\" custom filter\n  $.expr.pseudos.appeared = $.expr.createPseudo(function(arg) {\n    return function(element) {\n      var $element = $(element);\n      if (!$element.is(':visible')) {\n        return false;\n      }\n\n      var window_left = $window.scrollLeft();\n      var window_top = $window.scrollTop();\n      var offset = $element.offset();\n      var left = offset.left;\n      var top = offset.top;\n\n      if (top + $element.height() >= window_top &&\n          top - ($element.data('appear-top-offset') || 0) <= window_top + $window.height() &&\n          left + $element.width() >= window_left &&\n          left - ($element.data('appear-left-offset') || 0) <= window_left + $window.width()) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n  });\n\n  $.fn.extend({\n    // watching for element's appearance in browser viewport\n    appear: function(selector, options) {\n      $.appear(this, options);\n      return this;\n    }\n  });\n\n  $.extend({\n    appear: function(selector, options) {\n      var opts = $.extend({}, defaults, options || {});\n\n      if (!check_binded) {\n        var on_check = function() {\n          if (check_lock) {\n            return;\n          }\n          check_lock = true;\n\n          setTimeout(process, opts.interval);\n        };\n\n        $(window).scroll(on_check).resize(on_check);\n        check_binded = true;\n      }\n\n      if (opts.force_process) {\n        setTimeout(process, opts.interval);\n      }\n\n      add_selector(selector);\n    },\n    // force elements's appearance check\n    force_appear: function() {\n      if (check_binded) {\n        process();\n        return true;\n      }\n      return false;\n    }\n  });\n})(function() {\n  if (typeof module !== 'undefined') {\n    // Node\n    return require('jquery');\n  } else {\n    return jQuery;\n  }\n}());\n\n/*jshint browser:true */\n/*!\n* FitVids 1.1\n*\n* Copyright 2013, Chris Coyier - http://css-tricks.com + Dave Rupert - http://daverupert.com\n* Credit to Thierry Koblentz - http://www.alistapart.com/articles/creating-intrinsic-ratios-for-video/\n* Released under the WTFPL license - http://sam.zoy.org/wtfpl/\n*\n*/\n\n;(function( $ ){\n\n  'use strict';\n\n  $.fn.fitVids = function( options ) {\n    var settings = {\n      customSelector: null,\n      ignore: null\n    };\n\n    if(!document.getElementById('fit-vids-style')) {\n      // appendStyles: https://github.com/toddmotto/fluidvids/blob/master/dist/fluidvids.js\n      var head = document.head || document.getElementsByTagName('head')[0];\n      var css = '.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}';\n      var div = document.createElement(\"div\");\n      div.innerHTML = '<p>x</p><style id=\"fit-vids-style\">' + css + '</style>';\n      head.appendChild(div.childNodes[1]);\n    }\n\n    if ( options ) {\n      $.extend( settings, options );\n    }\n\n    return this.each(function(){\n      var selectors = [\n        'iframe[src*=\"player.vimeo.com\"]',\n        'iframe[src*=\"youtube.com\"]',\n        'iframe[src*=\"youtube-nocookie.com\"]',\n        'iframe[src*=\"kickstarter.com\"][src*=\"video.html\"]',\n        'object',\n        'embed'\n      ];\n\n      if (settings.customSelector) {\n        selectors.push(settings.customSelector);\n      }\n\n      var ignoreList = '.fitvidsignore';\n\n      if(settings.ignore) {\n        ignoreList = ignoreList + ', ' + settings.ignore;\n      }\n\n      var $allVideos = $(this).find(selectors.join(','));\n      $allVideos = $allVideos.not('object object'); // SwfObj conflict patch\n      $allVideos = $allVideos.not(ignoreList); // Disable FitVids on this video.\n\n      $allVideos.each(function(){\n        var $this = $(this);\n        if($this.parents(ignoreList).length > 0) {\n          return; // Disable FitVids on this video.\n        }\n        if (this.tagName.toLowerCase() === 'embed' && $this.parent('object').length || $this.parent('.fluid-width-video-wrapper').length) { return; }\n        if ((!$this.css('height') && !$this.css('width')) && (isNaN($this.attr('height')) || isNaN($this.attr('width'))))\n        {\n          $this.attr('height', 9);\n          $this.attr('width', 16);\n        }\n        var height = ( this.tagName.toLowerCase() === 'object' || ($this.attr('height') && !isNaN(parseInt($this.attr('height'), 10))) ) ? parseInt($this.attr('height'), 10) : $this.height(),\n            width = !isNaN(parseInt($this.attr('width'), 10)) ? parseInt($this.attr('width'), 10) : $this.width(),\n            aspectRatio = height / width;\n        if(!$this.attr('name')){\n          var videoName = 'fitvid' + $.fn.fitVids._count;\n          $this.attr('name', videoName);\n          $.fn.fitVids._count++;\n        }\n        $this.wrap('<div class=\"fluid-width-video-wrapper\"></div>').parent('.fluid-width-video-wrapper').css('padding-top', (aspectRatio * 100)+'%');\n        $this.removeAttr('height').removeAttr('width');\n      });\n    });\n  };\n  \n  // Internal counter for unique video names.\n  $.fn.fitVids._count = 0;\n  \n// Works with either jQuery or Zepto\n})( window.jQuery || window.Zepto );\n\n/**\n* ghostHunter - 0.6.0\n * Copyright (C) 2014 Jamal Neufeld (jamal@i11u.me)\n * MIT Licensed\n * @license\n*/\n(function( $ ) {\n\n\t/**\n * lunr - http://lunrjs.com - A bit like Solr, but much smaller and not as bright - 2.1.5\n * Copyright (C) 2017 Oliver Nightingale\n * @license MIT\n */\n\n;(function(){\n\n/**\n * A convenience function for configuring and constructing\n * a new lunr Index.\n *\n * A lunr.Builder instance is created and the pipeline setup\n * with a trimmer, stop word filter and stemmer.\n *\n * This builder object is yielded to the configuration function\n * that is passed as a parameter, allowing the list of fields\n * and other builder parameters to be customised.\n *\n * All documents _must_ be added within the passed config function.\n *\n * @example\n * var idx = lunr(function () {\n *   this.field('title')\n *   this.field('body')\n *   this.ref('id')\n *\n *   documents.forEach(function (doc) {\n *     this.add(doc)\n *   }, this)\n * })\n *\n * @see {@link lunr.Builder}\n * @see {@link lunr.Pipeline}\n * @see {@link lunr.trimmer}\n * @see {@link lunr.stopWordFilter}\n * @see {@link lunr.stemmer}\n * @namespace {function} lunr\n */\nvar lunr = function (config) {\n  var builder = new lunr.Builder\n\n  builder.pipeline.add(\n    lunr.trimmer,\n    lunr.stopWordFilter,\n    lunr.stemmer\n  )\n\n  builder.searchPipeline.add(\n    lunr.stemmer\n  )\n\n  config.call(builder, builder)\n  return builder.build()\n}\n\nlunr.version = \"2.1.5\"\n/*!\n * lunr.utils\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A namespace containing utils for the rest of the lunr library\n */\nlunr.utils = {}\n\n/**\n * Print a warning message to the console.\n *\n * @param {String} message The message to be printed.\n * @memberOf Utils\n */\nlunr.utils.warn = (function (global) {\n  /* eslint-disable no-console */\n  return function (message) {\n    if (global.console && console.warn) {\n      console.warn(message)\n    }\n  }\n  /* eslint-enable no-console */\n})(this)\n\n/**\n * Convert an object to a string.\n *\n * In the case of `null` and `undefined` the function returns\n * the empty string, in all other cases the result of calling\n * `toString` on the passed object is returned.\n *\n * @param {Any} obj The object to convert to a string.\n * @return {String} string representation of the passed object.\n * @memberOf Utils\n */\nlunr.utils.asString = function (obj) {\n  if (obj === void 0 || obj === null) {\n    return \"\"\n  } else {\n    return obj.toString()\n  }\n}\nlunr.FieldRef = function (docRef, fieldName, stringValue) {\n  this.docRef = docRef\n  this.fieldName = fieldName\n  this._stringValue = stringValue\n}\n\nlunr.FieldRef.joiner = \"/\"\n\nlunr.FieldRef.fromString = function (s) {\n  var n = s.indexOf(lunr.FieldRef.joiner)\n\n  if (n === -1) {\n    throw \"malformed field ref string\"\n  }\n\n  var fieldRef = s.slice(0, n),\n      docRef = s.slice(n + 1)\n\n  return new lunr.FieldRef (docRef, fieldRef, s)\n}\n\nlunr.FieldRef.prototype.toString = function () {\n  if (this._stringValue == undefined) {\n    this._stringValue = this.fieldName + lunr.FieldRef.joiner + this.docRef\n  }\n\n  return this._stringValue\n}\n/**\n * A function to calculate the inverse document frequency for\n * a posting. This is shared between the builder and the index\n *\n * @private\n * @param {object} posting - The posting for a given term\n * @param {number} documentCount - The total number of documents.\n */\nlunr.idf = function (posting, documentCount) {\n  var documentsWithTerm = 0\n\n  for (var fieldName in posting) {\n    if (fieldName == '_index') continue // Ignore the term index, its not a field\n    documentsWithTerm += Object.keys(posting[fieldName]).length\n  }\n\n  var x = (documentCount - documentsWithTerm + 0.5) / (documentsWithTerm + 0.5)\n\n  return Math.log(1 + Math.abs(x))\n}\n\n/**\n * A token wraps a string representation of a token\n * as it is passed through the text processing pipeline.\n *\n * @constructor\n * @param {string} [str=''] - The string token being wrapped.\n * @param {object} [metadata={}] - Metadata associated with this token.\n */\nlunr.Token = function (str, metadata) {\n  this.str = str || \"\"\n  this.metadata = metadata || {}\n}\n\n/**\n * Returns the token string that is being wrapped by this object.\n *\n * @returns {string}\n */\nlunr.Token.prototype.toString = function () {\n  return this.str\n}\n\n/**\n * A token update function is used when updating or optionally\n * when cloning a token.\n *\n * @callback lunr.Token~updateFunction\n * @param {string} str - The string representation of the token.\n * @param {Object} metadata - All metadata associated with this token.\n */\n\n/**\n * Applies the given function to the wrapped string token.\n *\n * @example\n * token.update(function (str, metadata) {\n *   return str.toUpperCase()\n * })\n *\n * @param {lunr.Token~updateFunction} fn - A function to apply to the token string.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.update = function (fn) {\n  this.str = fn(this.str, this.metadata)\n  return this\n}\n\n/**\n * Creates a clone of this token. Optionally a function can be\n * applied to the cloned token.\n *\n * @param {lunr.Token~updateFunction} [fn] - An optional function to apply to the cloned token.\n * @returns {lunr.Token}\n */\nlunr.Token.prototype.clone = function (fn) {\n  fn = fn || function (s) { return s }\n  return new lunr.Token (fn(this.str, this.metadata), this.metadata)\n}\n/*!\n * lunr.tokenizer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A function for splitting a string into tokens ready to be inserted into\n * the search index. Uses `lunr.tokenizer.separator` to split strings, change\n * the value of this property to change how strings are split into tokens.\n *\n * This tokenizer will convert its parameter to a string by calling `toString` and\n * then will split this string on the character in `lunr.tokenizer.separator`.\n * Arrays will have their elements converted to strings and wrapped in a lunr.Token.\n *\n * @static\n * @param {?(string|object|object[])} obj - The object to convert into tokens\n * @returns {lunr.Token[]}\n */\nlunr.tokenizer = function (obj) {\n  if (obj == null || obj == undefined) {\n    return []\n  }\n\n  if (Array.isArray(obj)) {\n    return obj.map(function (t) {\n      return new lunr.Token(lunr.utils.asString(t).toLowerCase())\n    })\n  }\n\n  var str = obj.toString().trim().toLowerCase(),\n      len = str.length,\n      tokens = []\n\n  for (var sliceEnd = 0, sliceStart = 0; sliceEnd <= len; sliceEnd++) {\n    var char = str.charAt(sliceEnd),\n        sliceLength = sliceEnd - sliceStart\n\n    if ((char.match(lunr.tokenizer.separator) || sliceEnd == len)) {\n\n      if (sliceLength > 0) {\n        tokens.push(\n          new lunr.Token (str.slice(sliceStart, sliceEnd), {\n            position: [sliceStart, sliceLength],\n            index: tokens.length\n          })\n        )\n      }\n\n      sliceStart = sliceEnd + 1\n    }\n\n  }\n\n  return tokens\n}\n\n/**\n * The separator used to split a string into tokens. Override this property to change the behaviour of\n * `lunr.tokenizer` behaviour when tokenizing strings. By default this splits on whitespace and hyphens.\n *\n * @static\n * @see lunr.tokenizer\n */\nlunr.tokenizer.separator = /[\\s\\-]+/\n/*!\n * lunr.Pipeline\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Pipelines maintain an ordered list of functions to be applied to all\n * tokens in documents entering the search index and queries being ran against\n * the index.\n *\n * An instance of lunr.Index created with the lunr shortcut will contain a\n * pipeline with a stop word filter and an English language stemmer. Extra\n * functions can be added before or after either of these functions or these\n * default functions can be removed.\n *\n * When run the pipeline will call each function in turn, passing a token, the\n * index of that token in the original list of all tokens and finally a list of\n * all the original tokens.\n *\n * The output of functions in the pipeline will be passed to the next function\n * in the pipeline. To exclude a token from entering the index the function\n * should return undefined, the rest of the pipeline will not be called with\n * this token.\n *\n * For serialisation of pipelines to work, all functions used in an instance of\n * a pipeline should be registered with lunr.Pipeline. Registered functions can\n * then be loaded. If trying to load a serialised pipeline that uses functions\n * that are not registered an error will be thrown.\n *\n * If not planning on serialising the pipeline then registering pipeline functions\n * is not necessary.\n *\n * @constructor\n */\nlunr.Pipeline = function () {\n  this._stack = []\n}\n\nlunr.Pipeline.registeredFunctions = Object.create(null)\n\n/**\n * A pipeline function maps lunr.Token to lunr.Token. A lunr.Token contains the token\n * string as well as all known metadata. A pipeline function can mutate the token string\n * or mutate (or add) metadata for a given token.\n *\n * A pipeline function can indicate that the passed token should be discarded by returning\n * null. This token will not be passed to any downstream pipeline functions and will not be\n * added to the index.\n *\n * Multiple tokens can be returned by returning an array of tokens. Each token will be passed\n * to any downstream pipeline functions and all will returned tokens will be added to the index.\n *\n * Any number of pipeline functions may be chained together using a lunr.Pipeline.\n *\n * @interface lunr.PipelineFunction\n * @param {lunr.Token} token - A token from the document being processed.\n * @param {number} i - The index of this token in the complete list of tokens for this document/field.\n * @param {lunr.Token[]} tokens - All tokens for this document/field.\n * @returns {(?lunr.Token|lunr.Token[])}\n */\n\n/**\n * Register a function with the pipeline.\n *\n * Functions that are used in the pipeline should be registered if the pipeline\n * needs to be serialised, or a serialised pipeline needs to be loaded.\n *\n * Registering a function does not add it to a pipeline, functions must still be\n * added to instances of the pipeline for them to be used when running a pipeline.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @param {String} label - The label to register this function with\n */\nlunr.Pipeline.registerFunction = function (fn, label) {\n  if (label in this.registeredFunctions) {\n    lunr.utils.warn('Overwriting existing registered function: ' + label)\n  }\n\n  fn.label = label\n  lunr.Pipeline.registeredFunctions[fn.label] = fn\n}\n\n/**\n * Warns if the function is not registered as a Pipeline function.\n *\n * @param {lunr.PipelineFunction} fn - The function to check for.\n * @private\n */\nlunr.Pipeline.warnIfFunctionNotRegistered = function (fn) {\n  var isRegistered = fn.label && (fn.label in this.registeredFunctions)\n\n  if (!isRegistered) {\n    lunr.utils.warn('Function is not registered with pipeline. This may cause problems when serialising the index.\\n', fn)\n  }\n}\n\n/**\n * Loads a previously serialised pipeline.\n *\n * All functions to be loaded must already be registered with lunr.Pipeline.\n * If any function from the serialised data has not been registered then an\n * error will be thrown.\n *\n * @param {Object} serialised - The serialised pipeline to load.\n * @returns {lunr.Pipeline}\n */\nlunr.Pipeline.load = function (serialised) {\n  var pipeline = new lunr.Pipeline\n\n  serialised.forEach(function (fnName) {\n    var fn = lunr.Pipeline.registeredFunctions[fnName]\n\n    if (fn) {\n      pipeline.add(fn)\n    } else {\n      throw new Error('Cannot load unregistered function: ' + fnName)\n    }\n  })\n\n  return pipeline\n}\n\n/**\n * Adds new functions to the end of the pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction[]} functions - Any number of functions to add to the pipeline.\n */\nlunr.Pipeline.prototype.add = function () {\n  var fns = Array.prototype.slice.call(arguments)\n\n  fns.forEach(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n    this._stack.push(fn)\n  }, this)\n}\n\n/**\n * Adds a single function after a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.after = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  pos = pos + 1\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Adds a single function before a function that already exists in the\n * pipeline.\n *\n * Logs a warning if the function has not been registered.\n *\n * @param {lunr.PipelineFunction} existingFn - A function that already exists in the pipeline.\n * @param {lunr.PipelineFunction} newFn - The new function to add to the pipeline.\n */\nlunr.Pipeline.prototype.before = function (existingFn, newFn) {\n  lunr.Pipeline.warnIfFunctionNotRegistered(newFn)\n\n  var pos = this._stack.indexOf(existingFn)\n  if (pos == -1) {\n    throw new Error('Cannot find existingFn')\n  }\n\n  this._stack.splice(pos, 0, newFn)\n}\n\n/**\n * Removes a function from the pipeline.\n *\n * @param {lunr.PipelineFunction} fn The function to remove from the pipeline.\n */\nlunr.Pipeline.prototype.remove = function (fn) {\n  var pos = this._stack.indexOf(fn)\n  if (pos == -1) {\n    return\n  }\n\n  this._stack.splice(pos, 1)\n}\n\n/**\n * Runs the current list of functions that make up the pipeline against the\n * passed tokens.\n *\n * @param {Array} tokens The tokens to run through the pipeline.\n * @returns {Array}\n */\nlunr.Pipeline.prototype.run = function (tokens) {\n  var stackLength = this._stack.length\n\n  for (var i = 0; i < stackLength; i++) {\n    var fn = this._stack[i]\n\n    tokens = tokens.reduce(function (memo, token, j) {\n      var result = fn(token, j, tokens)\n\n      if (result === void 0 || result === '') return memo\n\n      return memo.concat(result)\n    }, [])\n  }\n\n  return tokens\n}\n\n/**\n * Convenience method for passing a string through a pipeline and getting\n * strings out. This method takes care of wrapping the passed string in a\n * token and mapping the resulting tokens back to strings.\n *\n * @param {string} str - The string to pass through the pipeline.\n * @returns {string[]}\n */\nlunr.Pipeline.prototype.runString = function (str) {\n  var token = new lunr.Token (str)\n\n  return this.run([token]).map(function (t) {\n    return t.toString()\n  })\n}\n\n/**\n * Resets the pipeline by removing any existing processors.\n *\n */\nlunr.Pipeline.prototype.reset = function () {\n  this._stack = []\n}\n\n/**\n * Returns a representation of the pipeline ready for serialisation.\n *\n * Logs a warning if the function has not been registered.\n *\n * @returns {Array}\n */\nlunr.Pipeline.prototype.toJSON = function () {\n  return this._stack.map(function (fn) {\n    lunr.Pipeline.warnIfFunctionNotRegistered(fn)\n\n    return fn.label\n  })\n}\n/*!\n * lunr.Vector\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A vector is used to construct the vector space of documents and queries. These\n * vectors support operations to determine the similarity between two documents or\n * a document and a query.\n *\n * Normally no parameters are required for initializing a vector, but in the case of\n * loading a previously dumped vector the raw elements can be provided to the constructor.\n *\n * For performance reasons vectors are implemented with a flat array, where an elements\n * index is immediately followed by its value. E.g. [index, value, index, value]. This\n * allows the underlying array to be as sparse as possible and still offer decent\n * performance when being used for vector calculations.\n *\n * @constructor\n * @param {Number[]} [elements] - The flat list of element index and element value pairs.\n */\nlunr.Vector = function (elements) {\n  this._magnitude = 0\n  this.elements = elements || []\n}\n\n\n/**\n * Calculates the position within the vector to insert a given index.\n *\n * This is used internally by insert and upsert. If there are duplicate indexes then\n * the position is returned as if the value for that index were to be updated, but it\n * is the callers responsibility to check whether there is a duplicate at that index\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @returns {Number}\n */\nlunr.Vector.prototype.positionForIndex = function (index) {\n  // For an empty vector the tuple can be inserted at the beginning\n  if (this.elements.length == 0) {\n    return 0\n  }\n\n  var start = 0,\n      end = this.elements.length / 2,\n      sliceLength = end - start,\n      pivotPoint = Math.floor(sliceLength / 2),\n      pivotIndex = this.elements[pivotPoint * 2]\n\n  while (sliceLength > 1) {\n    if (pivotIndex < index) {\n      start = pivotPoint\n    }\n\n    if (pivotIndex > index) {\n      end = pivotPoint\n    }\n\n    if (pivotIndex == index) {\n      break\n    }\n\n    sliceLength = end - start\n    pivotPoint = start + Math.floor(sliceLength / 2)\n    pivotIndex = this.elements[pivotPoint * 2]\n  }\n\n  if (pivotIndex == index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex > index) {\n    return pivotPoint * 2\n  }\n\n  if (pivotIndex < index) {\n    return (pivotPoint + 1) * 2\n  }\n}\n\n/**\n * Inserts an element at an index within the vector.\n *\n * Does not allow duplicates, will throw an error if there is already an entry\n * for this index.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n */\nlunr.Vector.prototype.insert = function (insertIdx, val) {\n  this.upsert(insertIdx, val, function () {\n    throw \"duplicate index\"\n  })\n}\n\n/**\n * Inserts or updates an existing index within the vector.\n *\n * @param {Number} insertIdx - The index at which the element should be inserted.\n * @param {Number} val - The value to be inserted into the vector.\n * @param {function} fn - A function that is called for updates, the existing value and the\n * requested value are passed as arguments\n */\nlunr.Vector.prototype.upsert = function (insertIdx, val, fn) {\n  this._magnitude = 0\n  var position = this.positionForIndex(insertIdx)\n\n  if (this.elements[position] == insertIdx) {\n    this.elements[position + 1] = fn(this.elements[position + 1], val)\n  } else {\n    this.elements.splice(position, 0, insertIdx, val)\n  }\n}\n\n/**\n * Calculates the magnitude of this vector.\n *\n * @returns {Number}\n */\nlunr.Vector.prototype.magnitude = function () {\n  if (this._magnitude) return this._magnitude\n\n  var sumOfSquares = 0,\n      elementsLength = this.elements.length\n\n  for (var i = 1; i < elementsLength; i += 2) {\n    var val = this.elements[i]\n    sumOfSquares += val * val\n  }\n\n  return this._magnitude = Math.sqrt(sumOfSquares)\n}\n\n/**\n * Calculates the dot product of this vector and another vector.\n *\n * @param {lunr.Vector} otherVector - The vector to compute the dot product with.\n * @returns {Number}\n */\nlunr.Vector.prototype.dot = function (otherVector) {\n  var dotProduct = 0,\n      a = this.elements, b = otherVector.elements,\n      aLen = a.length, bLen = b.length,\n      aVal = 0, bVal = 0,\n      i = 0, j = 0\n\n  while (i < aLen && j < bLen) {\n    aVal = a[i], bVal = b[j]\n    if (aVal < bVal) {\n      i += 2\n    } else if (aVal > bVal) {\n      j += 2\n    } else if (aVal == bVal) {\n      dotProduct += a[i + 1] * b[j + 1]\n      i += 2\n      j += 2\n    }\n  }\n\n  return dotProduct\n}\n\n/**\n * Calculates the cosine similarity between this vector and another\n * vector.\n *\n * @param {lunr.Vector} otherVector - The other vector to calculate the\n * similarity with.\n * @returns {Number}\n */\nlunr.Vector.prototype.similarity = function (otherVector) {\n  return this.dot(otherVector) / (this.magnitude() * otherVector.magnitude())\n}\n\n/**\n * Converts the vector to an array of the elements within the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toArray = function () {\n  var output = new Array (this.elements.length / 2)\n\n  for (var i = 1, j = 0; i < this.elements.length; i += 2, j++) {\n    output[j] = this.elements[i]\n  }\n\n  return output\n}\n\n/**\n * A JSON serializable representation of the vector.\n *\n * @returns {Number[]}\n */\nlunr.Vector.prototype.toJSON = function () {\n  return this.elements\n}\n/* eslint-disable */\n/*!\n * lunr.stemmer\n * Copyright (C) 2017 Oliver Nightingale\n * Includes code from - http://tartarus.org/~martin/PorterStemmer/js.txt\n */\n\n/**\n * lunr.stemmer is an english language stemmer, this is a JavaScript\n * implementation of the PorterStemmer taken from http://tartarus.org/~martin\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token - The string to stem\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stemmer = (function(){\n  var step2list = {\n      \"ational\" : \"ate\",\n      \"tional\" : \"tion\",\n      \"enci\" : \"ence\",\n      \"anci\" : \"ance\",\n      \"izer\" : \"ize\",\n      \"bli\" : \"ble\",\n      \"alli\" : \"al\",\n      \"entli\" : \"ent\",\n      \"eli\" : \"e\",\n      \"ousli\" : \"ous\",\n      \"ization\" : \"ize\",\n      \"ation\" : \"ate\",\n      \"ator\" : \"ate\",\n      \"alism\" : \"al\",\n      \"iveness\" : \"ive\",\n      \"fulness\" : \"ful\",\n      \"ousness\" : \"ous\",\n      \"aliti\" : \"al\",\n      \"iviti\" : \"ive\",\n      \"biliti\" : \"ble\",\n      \"logi\" : \"log\"\n    },\n\n    step3list = {\n      \"icate\" : \"ic\",\n      \"ative\" : \"\",\n      \"alize\" : \"al\",\n      \"iciti\" : \"ic\",\n      \"ical\" : \"ic\",\n      \"ful\" : \"\",\n      \"ness\" : \"\"\n    },\n\n    c = \"[^aeiou]\",          // consonant\n    v = \"[aeiouy]\",          // vowel\n    C = c + \"[^aeiouy]*\",    // consonant sequence\n    V = v + \"[aeiou]*\",      // vowel sequence\n\n    mgr0 = \"^(\" + C + \")?\" + V + C,               // [C]VC... is m>0\n    meq1 = \"^(\" + C + \")?\" + V + C + \"(\" + V + \")?$\",  // [C]VC[V] is m=1\n    mgr1 = \"^(\" + C + \")?\" + V + C + V + C,       // [C]VCVC... is m>1\n    s_v = \"^(\" + C + \")?\" + v;                   // vowel in stem\n\n  var re_mgr0 = new RegExp(mgr0);\n  var re_mgr1 = new RegExp(mgr1);\n  var re_meq1 = new RegExp(meq1);\n  var re_s_v = new RegExp(s_v);\n\n  var re_1a = /^(.+?)(ss|i)es$/;\n  var re2_1a = /^(.+?)([^s])s$/;\n  var re_1b = /^(.+?)eed$/;\n  var re2_1b = /^(.+?)(ed|ing)$/;\n  var re_1b_2 = /.$/;\n  var re2_1b_2 = /(at|bl|iz)$/;\n  var re3_1b_2 = new RegExp(\"([^aeiouylsz])\\\\1$\");\n  var re4_1b_2 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var re_1c = /^(.+?[^aeiou])y$/;\n  var re_2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;\n\n  var re_3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;\n\n  var re_4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;\n  var re2_4 = /^(.+?)(s|t)(ion)$/;\n\n  var re_5 = /^(.+?)e$/;\n  var re_5_1 = /ll$/;\n  var re3_5 = new RegExp(\"^\" + C + v + \"[^aeiouwxy]$\");\n\n  var porterStemmer = function porterStemmer(w) {\n    var stem,\n      suffix,\n      firstch,\n      re,\n      re2,\n      re3,\n      re4;\n\n    if (w.length < 3) { return w; }\n\n    firstch = w.substr(0,1);\n    if (firstch == \"y\") {\n      w = firstch.toUpperCase() + w.substr(1);\n    }\n\n    // Step 1a\n    re = re_1a\n    re2 = re2_1a;\n\n    if (re.test(w)) { w = w.replace(re,\"$1$2\"); }\n    else if (re2.test(w)) { w = w.replace(re2,\"$1$2\"); }\n\n    // Step 1b\n    re = re_1b;\n    re2 = re2_1b;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      re = re_mgr0;\n      if (re.test(fp[1])) {\n        re = re_1b_2;\n        w = w.replace(re,\"\");\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1];\n      re2 = re_s_v;\n      if (re2.test(stem)) {\n        w = stem;\n        re2 = re2_1b_2;\n        re3 = re3_1b_2;\n        re4 = re4_1b_2;\n        if (re2.test(w)) { w = w + \"e\"; }\n        else if (re3.test(w)) { re = re_1b_2; w = w.replace(re,\"\"); }\n        else if (re4.test(w)) { w = w + \"e\"; }\n      }\n    }\n\n    // Step 1c - replace suffix y or Y by i if preceded by a non-vowel which is not the first letter of the word (so cry -> cri, by -> by, say -> say)\n    re = re_1c;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      w = stem + \"i\";\n    }\n\n    // Step 2\n    re = re_2;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step2list[suffix];\n      }\n    }\n\n    // Step 3\n    re = re_3;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      suffix = fp[2];\n      re = re_mgr0;\n      if (re.test(stem)) {\n        w = stem + step3list[suffix];\n      }\n    }\n\n    // Step 4\n    re = re_4;\n    re2 = re2_4;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      if (re.test(stem)) {\n        w = stem;\n      }\n    } else if (re2.test(w)) {\n      var fp = re2.exec(w);\n      stem = fp[1] + fp[2];\n      re2 = re_mgr1;\n      if (re2.test(stem)) {\n        w = stem;\n      }\n    }\n\n    // Step 5\n    re = re_5;\n    if (re.test(w)) {\n      var fp = re.exec(w);\n      stem = fp[1];\n      re = re_mgr1;\n      re2 = re_meq1;\n      re3 = re3_5;\n      if (re.test(stem) || (re2.test(stem) && !(re3.test(stem)))) {\n        w = stem;\n      }\n    }\n\n    re = re_5_1;\n    re2 = re_mgr1;\n    if (re.test(w) && re2.test(w)) {\n      re = re_1b_2;\n      w = w.replace(re,\"\");\n    }\n\n    // and turn initial Y back to y\n\n    if (firstch == \"y\") {\n      w = firstch.toLowerCase() + w.substr(1);\n    }\n\n    return w;\n  };\n\n  return function (token) {\n    return token.update(porterStemmer);\n  }\n})();\n\nlunr.Pipeline.registerFunction(lunr.stemmer, 'stemmer')\n/*!\n * lunr.stopWordFilter\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.generateStopWordFilter builds a stopWordFilter function from the provided\n * list of stop words.\n *\n * The built in lunr.stopWordFilter is built using this generator and can be used\n * to generate custom stopWordFilters for applications or non English languages.\n *\n * @param {Array} token The token to pass through the filter\n * @returns {lunr.PipelineFunction}\n * @see lunr.Pipeline\n * @see lunr.stopWordFilter\n */\nlunr.generateStopWordFilter = function (stopWords) {\n  var words = stopWords.reduce(function (memo, stopWord) {\n    memo[stopWord] = stopWord\n    return memo\n  }, {})\n\n  return function (token) {\n    if (token && words[token.toString()] !== token.toString()) return token\n  }\n}\n\n/**\n * lunr.stopWordFilter is an English language stop word list filter, any words\n * contained in the list will not be passed through the filter.\n *\n * This is intended to be used in the Pipeline. If the token does not pass the\n * filter then undefined will be returned.\n *\n * @implements {lunr.PipelineFunction}\n * @params {lunr.Token} token - A token to check for being a stop word.\n * @returns {lunr.Token}\n * @see {@link lunr.Pipeline}\n */\nlunr.stopWordFilter = lunr.generateStopWordFilter([\n  'a',\n  'able',\n  'about',\n  'across',\n  'after',\n  'all',\n  'almost',\n  'also',\n  'am',\n  'among',\n  'an',\n  'and',\n  'any',\n  'are',\n  'as',\n  'at',\n  'be',\n  'because',\n  'been',\n  'but',\n  'by',\n  'can',\n  'cannot',\n  'could',\n  'dear',\n  'did',\n  'do',\n  'does',\n  'either',\n  'else',\n  'ever',\n  'every',\n  'for',\n  'from',\n  'get',\n  'got',\n  'had',\n  'has',\n  'have',\n  'he',\n  'her',\n  'hers',\n  'him',\n  'his',\n  'how',\n  'however',\n  'i',\n  'if',\n  'in',\n  'into',\n  'is',\n  'it',\n  'its',\n  'just',\n  'least',\n  'let',\n  'like',\n  'likely',\n  'may',\n  'me',\n  'might',\n  'most',\n  'must',\n  'my',\n  'neither',\n  'no',\n  'nor',\n  'not',\n  'of',\n  'off',\n  'often',\n  'on',\n  'only',\n  'or',\n  'other',\n  'our',\n  'own',\n  'rather',\n  'said',\n  'say',\n  'says',\n  'she',\n  'should',\n  'since',\n  'so',\n  'some',\n  'than',\n  'that',\n  'the',\n  'their',\n  'them',\n  'then',\n  'there',\n  'these',\n  'they',\n  'this',\n  'tis',\n  'to',\n  'too',\n  'twas',\n  'us',\n  'wants',\n  'was',\n  'we',\n  'were',\n  'what',\n  'when',\n  'where',\n  'which',\n  'while',\n  'who',\n  'whom',\n  'why',\n  'will',\n  'with',\n  'would',\n  'yet',\n  'you',\n  'your'\n])\n\nlunr.Pipeline.registerFunction(lunr.stopWordFilter, 'stopWordFilter')\n/*!\n * lunr.trimmer\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.trimmer is a pipeline function for trimming non word\n * characters from the beginning and end of tokens before they\n * enter the index.\n *\n * This implementation may not work correctly for non latin\n * characters and should either be removed or adapted for use\n * with languages with non-latin characters.\n *\n * @static\n * @implements {lunr.PipelineFunction}\n * @param {lunr.Token} token The token to pass through the filter\n * @returns {lunr.Token}\n * @see lunr.Pipeline\n */\nlunr.trimmer = function (token) {\n  return token.update(function (s) {\n    return s.replace(/^\\W+/, '').replace(/\\W+$/, '')\n  })\n}\n\nlunr.Pipeline.registerFunction(lunr.trimmer, 'trimmer')\n/*!\n * lunr.TokenSet\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * A token set is used to store the unique list of all tokens\n * within an index. Token sets are also used to represent an\n * incoming query to the index, this query token set and index\n * token set are then intersected to find which tokens to look\n * up in the inverted index.\n *\n * A token set can hold multiple tokens, as in the case of the\n * index token set, or it can hold a single token as in the\n * case of a simple query token set.\n *\n * Additionally token sets are used to perform wildcard matching.\n * Leading, contained and trailing wildcards are supported, and\n * from this edit distance matching can also be provided.\n *\n * Token sets are implemented as a minimal finite state automata,\n * where both common prefixes and suffixes are shared between tokens.\n * This helps to reduce the space used for storing the token set.\n *\n * @constructor\n */\nlunr.TokenSet = function () {\n  this.final = false\n  this.edges = {}\n  this.id = lunr.TokenSet._nextId\n  lunr.TokenSet._nextId += 1\n}\n\n/**\n * Keeps track of the next, auto increment, identifier to assign\n * to a new tokenSet.\n *\n * TokenSets require a unique identifier to be correctly minimised.\n *\n * @private\n */\nlunr.TokenSet._nextId = 1\n\n/**\n * Creates a TokenSet instance from the given sorted array of words.\n *\n * @param {String[]} arr - A sorted array of strings to create the set from.\n * @returns {lunr.TokenSet}\n * @throws Will throw an error if the input array is not sorted.\n */\nlunr.TokenSet.fromArray = function (arr) {\n  var builder = new lunr.TokenSet.Builder\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    builder.insert(arr[i])\n  }\n\n  builder.finish()\n  return builder.root\n}\n\n/**\n * Creates a token set from a query clause.\n *\n * @private\n * @param {Object} clause - A single clause from lunr.Query.\n * @param {string} clause.term - The query clause term.\n * @param {number} [clause.editDistance] - The optional edit distance for the term.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromClause = function (clause) {\n  if ('editDistance' in clause) {\n    return lunr.TokenSet.fromFuzzyString(clause.term, clause.editDistance)\n  } else {\n    return lunr.TokenSet.fromString(clause.term)\n  }\n}\n\n/**\n * Creates a token set representing a single string with a specified\n * edit distance.\n *\n * Insertions, deletions, substitutions and transpositions are each\n * treated as an edit distance of 1.\n *\n * Increasing the allowed edit distance will have a dramatic impact\n * on the performance of both creating and intersecting these TokenSets.\n * It is advised to keep the edit distance less than 3.\n *\n * @param {string} str - The string to create the token set from.\n * @param {number} editDistance - The allowed edit distance to match.\n * @returns {lunr.Vector}\n */\nlunr.TokenSet.fromFuzzyString = function (str, editDistance) {\n  var root = new lunr.TokenSet\n\n  var stack = [{\n    node: root,\n    editsRemaining: editDistance,\n    str: str\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop()\n\n    // no edit\n    if (frame.str.length > 0) {\n      var char = frame.str.charAt(0),\n          noEditNode\n\n      if (char in frame.node.edges) {\n        noEditNode = frame.node.edges[char]\n      } else {\n        noEditNode = new lunr.TokenSet\n        frame.node.edges[char] = noEditNode\n      }\n\n      if (frame.str.length == 1) {\n        noEditNode.final = true\n      } else {\n        stack.push({\n          node: noEditNode,\n          editsRemaining: frame.editsRemaining,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // deletion\n    // can only do a deletion if we have enough edits remaining\n    // and if there are characters left to delete in the string\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var char = frame.str.charAt(1),\n          deletionNode\n\n      if (char in frame.node.edges) {\n        deletionNode = frame.node.edges[char]\n      } else {\n        deletionNode = new lunr.TokenSet\n        frame.node.edges[char] = deletionNode\n      }\n\n      if (frame.str.length <= 2) {\n        deletionNode.final = true\n      } else {\n        stack.push({\n          node: deletionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(2)\n        })\n      }\n    }\n\n    // deletion\n    // just removing the last character from the str\n    if (frame.editsRemaining > 0 && frame.str.length == 1) {\n      frame.node.final = true\n    }\n\n    // substitution\n    // can only do a substitution if we have enough edits remaining\n    // and if there are characters left to substitute\n    if (frame.editsRemaining > 0 && frame.str.length >= 1) {\n      if (\"*\" in frame.node.edges) {\n        var substitutionNode = frame.node.edges[\"*\"]\n      } else {\n        var substitutionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = substitutionNode\n      }\n\n      if (frame.str.length == 1) {\n        substitutionNode.final = true\n      } else {\n        stack.push({\n          node: substitutionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str.slice(1)\n        })\n      }\n    }\n\n    // insertion\n    // can only do insertion if there are edits remaining\n    if (frame.editsRemaining > 0) {\n      if (\"*\" in frame.node.edges) {\n        var insertionNode = frame.node.edges[\"*\"]\n      } else {\n        var insertionNode = new lunr.TokenSet\n        frame.node.edges[\"*\"] = insertionNode\n      }\n\n      if (frame.str.length == 0) {\n        insertionNode.final = true\n      } else {\n        stack.push({\n          node: insertionNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: frame.str\n        })\n      }\n    }\n\n    // transposition\n    // can only do a transposition if there are edits remaining\n    // and there are enough characters to transpose\n    if (frame.editsRemaining > 0 && frame.str.length > 1) {\n      var charA = frame.str.charAt(0),\n          charB = frame.str.charAt(1),\n          transposeNode\n\n      if (charB in frame.node.edges) {\n        transposeNode = frame.node.edges[charB]\n      } else {\n        transposeNode = new lunr.TokenSet\n        frame.node.edges[charB] = transposeNode\n      }\n\n      if (frame.str.length == 1) {\n        transposeNode.final = true\n      } else {\n        stack.push({\n          node: transposeNode,\n          editsRemaining: frame.editsRemaining - 1,\n          str: charA + frame.str.slice(2)\n        })\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Creates a TokenSet from a string.\n *\n * The string may contain one or more wildcard characters (*)\n * that will allow wildcard matching when intersecting with\n * another TokenSet.\n *\n * @param {string} str - The string to create a TokenSet from.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.fromString = function (str) {\n  var node = new lunr.TokenSet,\n      root = node,\n      wildcardFound = false\n\n  /*\n   * Iterates through all characters within the passed string\n   * appending a node for each character.\n   *\n   * As soon as a wildcard character is found then a self\n   * referencing edge is introduced to continually match\n   * any number of any characters.\n   */\n  for (var i = 0, len = str.length; i < len; i++) {\n    var char = str[i],\n        final = (i == len - 1)\n\n    if (char == \"*\") {\n      wildcardFound = true\n      node.edges[char] = node\n      node.final = final\n\n    } else {\n      var next = new lunr.TokenSet\n      next.final = final\n\n      node.edges[char] = next\n      node = next\n\n      // TODO: is this needed anymore?\n      if (wildcardFound) {\n        node.edges[\"*\"] = root\n      }\n    }\n  }\n\n  return root\n}\n\n/**\n * Converts this TokenSet into an array of strings\n * contained within the TokenSet.\n *\n * @returns {string[]}\n */\nlunr.TokenSet.prototype.toArray = function () {\n  var words = []\n\n  var stack = [{\n    prefix: \"\",\n    node: this\n  }]\n\n  while (stack.length) {\n    var frame = stack.pop(),\n        edges = Object.keys(frame.node.edges),\n        len = edges.length\n\n    if (frame.node.final) {\n      words.push(frame.prefix)\n    }\n\n    for (var i = 0; i < len; i++) {\n      var edge = edges[i]\n\n      stack.push({\n        prefix: frame.prefix.concat(edge),\n        node: frame.node.edges[edge]\n      })\n    }\n  }\n\n  return words\n}\n\n/**\n * Generates a string representation of a TokenSet.\n *\n * This is intended to allow TokenSets to be used as keys\n * in objects, largely to aid the construction and minimisation\n * of a TokenSet. As such it is not designed to be a human\n * friendly representation of the TokenSet.\n *\n * @returns {string}\n */\nlunr.TokenSet.prototype.toString = function () {\n  // NOTE: Using Object.keys here as this.edges is very likely\n  // to enter 'hash-mode' with many keys being added\n  //\n  // avoiding a for-in loop here as it leads to the function\n  // being de-optimised (at least in V8). From some simple\n  // benchmarks the performance is comparable, but allowing\n  // V8 to optimize may mean easy performance wins in the future.\n\n  if (this._str) {\n    return this._str\n  }\n\n  var str = this.final ? '1' : '0',\n      labels = Object.keys(this.edges).sort(),\n      len = labels.length\n\n  for (var i = 0; i < len; i++) {\n    var label = labels[i],\n        node = this.edges[label]\n\n    str = str + label + node.id\n  }\n\n  return str\n}\n\n/**\n * Returns a new TokenSet that is the intersection of\n * this TokenSet and the passed TokenSet.\n *\n * This intersection will take into account any wildcards\n * contained within the TokenSet.\n *\n * @param {lunr.TokenSet} b - An other TokenSet to intersect with.\n * @returns {lunr.TokenSet}\n */\nlunr.TokenSet.prototype.intersect = function (b) {\n  var output = new lunr.TokenSet,\n      frame = undefined\n\n  var stack = [{\n    qNode: b,\n    output: output,\n    node: this\n  }]\n\n  while (stack.length) {\n    frame = stack.pop()\n\n    // NOTE: As with the #toString method, we are using\n    // Object.keys and a for loop instead of a for-in loop\n    // as both of these objects enter 'hash' mode, causing\n    // the function to be de-optimised in V8\n    var qEdges = Object.keys(frame.qNode.edges),\n        qLen = qEdges.length,\n        nEdges = Object.keys(frame.node.edges),\n        nLen = nEdges.length\n\n    for (var q = 0; q < qLen; q++) {\n      var qEdge = qEdges[q]\n\n      for (var n = 0; n < nLen; n++) {\n        var nEdge = nEdges[n]\n\n        if (nEdge == qEdge || qEdge == '*') {\n          var node = frame.node.edges[nEdge],\n              qNode = frame.qNode.edges[qEdge],\n              final = node.final && qNode.final,\n              next = undefined\n\n          if (nEdge in frame.output.edges) {\n            // an edge already exists for this character\n            // no need to create a new node, just set the finality\n            // bit unless this node is already final\n            next = frame.output.edges[nEdge]\n            next.final = next.final || final\n\n          } else {\n            // no edge exists yet, must create one\n            // set the finality bit and insert it\n            // into the output\n            next = new lunr.TokenSet\n            next.final = final\n            frame.output.edges[nEdge] = next\n          }\n\n          stack.push({\n            qNode: qNode,\n            output: next,\n            node: node\n          })\n        }\n      }\n    }\n  }\n\n  return output\n}\nlunr.TokenSet.Builder = function () {\n  this.previousWord = \"\"\n  this.root = new lunr.TokenSet\n  this.uncheckedNodes = []\n  this.minimizedNodes = {}\n}\n\nlunr.TokenSet.Builder.prototype.insert = function (word) {\n  var node,\n      commonPrefix = 0\n\n  if (word < this.previousWord) {\n    throw new Error (\"Out of order word insertion\")\n  }\n\n  for (var i = 0; i < word.length && i < this.previousWord.length; i++) {\n    if (word[i] != this.previousWord[i]) break\n    commonPrefix++\n  }\n\n  this.minimize(commonPrefix)\n\n  if (this.uncheckedNodes.length == 0) {\n    node = this.root\n  } else {\n    node = this.uncheckedNodes[this.uncheckedNodes.length - 1].child\n  }\n\n  for (var i = commonPrefix; i < word.length; i++) {\n    var nextNode = new lunr.TokenSet,\n        char = word[i]\n\n    node.edges[char] = nextNode\n\n    this.uncheckedNodes.push({\n      parent: node,\n      char: char,\n      child: nextNode\n    })\n\n    node = nextNode\n  }\n\n  node.final = true\n  this.previousWord = word\n}\n\nlunr.TokenSet.Builder.prototype.finish = function () {\n  this.minimize(0)\n}\n\nlunr.TokenSet.Builder.prototype.minimize = function (downTo) {\n  for (var i = this.uncheckedNodes.length - 1; i >= downTo; i--) {\n    var node = this.uncheckedNodes[i],\n        childKey = node.child.toString()\n\n    if (childKey in this.minimizedNodes) {\n      node.parent.edges[node.char] = this.minimizedNodes[childKey]\n    } else {\n      // Cache the key for this node since\n      // we know it can't change anymore\n      node.child._str = childKey\n\n      this.minimizedNodes[childKey] = node.child\n    }\n\n    this.uncheckedNodes.pop()\n  }\n}\n/*!\n * lunr.Index\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * An index contains the built index of all documents and provides a query interface\n * to the index.\n *\n * Usually instances of lunr.Index will not be created using this constructor, instead\n * lunr.Builder should be used to construct new indexes, or lunr.Index.load should be\n * used to load previously built and serialized indexes.\n *\n * @constructor\n * @param {Object} attrs - The attributes of the built search index.\n * @param {Object} attrs.invertedIndex - An index of term/field to document reference.\n * @param {Object<string, lunr.Vector>} attrs.documentVectors - Document vectors keyed by document reference.\n * @param {lunr.TokenSet} attrs.tokenSet - An set of all corpus tokens.\n * @param {string[]} attrs.fields - The names of indexed document fields.\n * @param {lunr.Pipeline} attrs.pipeline - The pipeline to use for search terms.\n */\nlunr.Index = function (attrs) {\n  this.invertedIndex = attrs.invertedIndex\n  this.fieldVectors = attrs.fieldVectors\n  this.tokenSet = attrs.tokenSet\n  this.fields = attrs.fields\n  this.pipeline = attrs.pipeline\n}\n\n/**\n * A result contains details of a document matching a search query.\n * @typedef {Object} lunr.Index~Result\n * @property {string} ref - The reference of the document this result represents.\n * @property {number} score - A number between 0 and 1 representing how similar this document is to the query.\n * @property {lunr.MatchData} matchData - Contains metadata about this match including which term(s) caused the match.\n */\n\n/**\n * Although lunr provides the ability to create queries using lunr.Query, it also provides a simple\n * query language which itself is parsed into an instance of lunr.Query.\n *\n * For programmatically building queries it is advised to directly use lunr.Query, the query language\n * is best used for human entered text rather than program generated text.\n *\n * At its simplest queries can just be a single term, e.g. `hello`, multiple terms are also supported\n * and will be combined with OR, e.g `hello world` will match documents that contain either 'hello'\n * or 'world', though those that contain both will rank higher in the results.\n *\n * Wildcards can be included in terms to match one or more unspecified characters, these wildcards can\n * be inserted anywhere within the term, and more than one wildcard can exist in a single term. Adding\n * wildcards will increase the number of documents that will be found but can also have a negative\n * impact on query performance, especially with wildcards at the beginning of a term.\n *\n * Terms can be restricted to specific fields, e.g. `title:hello`, only documents with the term\n * hello in the title field will match this query. Using a field not present in the index will lead\n * to an error being thrown.\n *\n * Modifiers can also be added to terms, lunr supports edit distance and boost modifiers on terms. A term\n * boost will make documents matching that term score higher, e.g. `foo^5`. Edit distance is also supported\n * to provide fuzzy matching, e.g. 'hello~2' will match documents with hello with an edit distance of 2.\n * Avoid large values for edit distance to improve query performance.\n *\n * To escape special characters the backslash character '\\' can be used, this allows searches to include\n * characters that would normally be considered modifiers, e.g. `foo\\~2` will search for a term \"foo~2\" instead\n * of attempting to apply a boost of 2 to the search term \"foo\".\n *\n * @typedef {string} lunr.Index~QueryString\n * @example <caption>Simple single term query</caption>\n * hello\n * @example <caption>Multiple term query</caption>\n * hello world\n * @example <caption>term scoped to a field</caption>\n * title:hello\n * @example <caption>term with a boost of 10</caption>\n * hello^10\n * @example <caption>term with an edit distance of 2</caption>\n * hello~2\n */\n\n/**\n * Performs a search against the index using lunr query syntax.\n *\n * Results will be returned sorted by their score, the most relevant results\n * will be returned first.\n *\n * For more programmatic querying use lunr.Index#query.\n *\n * @param {lunr.Index~QueryString} queryString - A string containing a lunr query.\n * @throws {lunr.QueryParseError} If the passed query string cannot be parsed.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.search = function (queryString) {\n  return this.query(function (query) {\n    var parser = new lunr.QueryParser(queryString, query)\n    parser.parse()\n  })\n}\n\n/**\n * A query builder callback provides a query object to be used to express\n * the query to perform on the index.\n *\n * @callback lunr.Index~queryBuilder\n * @param {lunr.Query} query - The query object to build up.\n * @this lunr.Query\n */\n\n/**\n * Performs a query against the index using the yielded lunr.Query object.\n *\n * If performing programmatic queries against the index, this method is preferred\n * over lunr.Index#search so as to avoid the additional query parsing overhead.\n *\n * A query object is yielded to the supplied function which should be used to\n * express the query to be run against the index.\n *\n * Note that although this function takes a callback parameter it is _not_ an\n * asynchronous operation, the callback is just yielded a query object to be\n * customized.\n *\n * @param {lunr.Index~queryBuilder} fn - A function that is used to build the query.\n * @returns {lunr.Index~Result[]}\n */\nlunr.Index.prototype.query = function (fn) {\n  // for each query clause\n  // * process terms\n  // * expand terms from token set\n  // * find matching documents and metadata\n  // * get document vectors\n  // * score documents\n\n  var query = new lunr.Query(this.fields),\n      matchingFields = Object.create(null),\n      queryVectors = Object.create(null),\n      termFieldCache = Object.create(null)\n\n  fn.call(query, query)\n\n  for (var i = 0; i < query.clauses.length; i++) {\n    /*\n     * Unless the pipeline has been disabled for this term, which is\n     * the case for terms with wildcards, we need to pass the clause\n     * term through the search pipeline. A pipeline returns an array\n     * of processed terms. Pipeline functions may expand the passed\n     * term, which means we may end up performing multiple index lookups\n     * for a single query term.\n     */\n    var clause = query.clauses[i],\n        terms = null\n\n    if (clause.usePipeline) {\n      terms = this.pipeline.runString(clause.term)\n    } else {\n      terms = [clause.term]\n    }\n\n    for (var m = 0; m < terms.length; m++) {\n      var term = terms[m]\n\n      /*\n       * Each term returned from the pipeline needs to use the same query\n       * clause object, e.g. the same boost and or edit distance. The\n       * simplest way to do this is to re-use the clause object but mutate\n       * its term property.\n       */\n\n      clause = JSON.parse(JSON.stringify(clause))\n      clause.term = term\n\n      /*\n       * From the term in the clause we create a token set which will then\n       * be used to intersect the indexes token set to get a list of terms\n       * to lookup in the inverted index\n       */\n      var termTokenSet = lunr.TokenSet.fromClause(clause),\n          expandedTerms = this.tokenSet.intersect(termTokenSet).toArray()\n\n      for (var j = 0; j < expandedTerms.length; j++) {\n        /*\n         * For each term get the posting and termIndex, this is required for\n         * building the query vector.\n         */\n          var expandedTerm = expandedTerms[j];\n          var posting = this.invertedIndex[expandedTerm];\n          if (posting) {\n              var termIndex = posting._index;\n          } else {\n              continue;\n          }\n        for (var k = 0; k < clause.fields.length; k++) {\n          /*\n           * For each field that this query term is scoped by (by default\n           * all fields are in scope) we need to get all the document refs\n           * that have this term in that field.\n           *\n           * The posting is the entry in the invertedIndex for the matching\n           * term from above.\n           */\n          var field = clause.fields[k],\n              fieldPosting = posting[field],\n              matchingDocumentRefs = Object.keys(fieldPosting),\n              termField = expandedTerm + \"/\" + field\n\n          /*\n           * To support field level boosts a query vector is created per\n           * field. This vector is populated using the termIndex found for\n           * the term and a unit value with the appropriate boost applied.\n           *\n           * If the query vector for this field does not exist yet it needs\n           * to be created.\n           */\n          if (queryVectors[field] === undefined) {\n            queryVectors[field] = new lunr.Vector\n          }\n\n          /*\n           * Using upsert because there could already be an entry in the vector\n           * for the term we are working with. In that case we just add the scores\n           * together.\n           */\n          queryVectors[field].upsert(termIndex, 1 * clause.boost, function (a, b) { return a + b })\n\n          /**\n           * If we've already seen this term, field combo then we've already collected\n           * the matching documents and metadata, no need to go through all that again\n           */\n          if (termFieldCache[termField]) {\n            continue\n          }\n\n          for (var l = 0; l < matchingDocumentRefs.length; l++) {\n            /*\n             * All metadata for this term/field/document triple\n             * are then extracted and collected into an instance\n             * of lunr.MatchData ready to be returned in the query\n             * results\n             */\n            var matchingDocumentRef = matchingDocumentRefs[l],\n                matchingFieldRef = new lunr.FieldRef (matchingDocumentRef, field),\n                metadata = fieldPosting[matchingDocumentRef],\n                fieldMatch\n\n            if ((fieldMatch = matchingFields[matchingFieldRef]) === undefined) {\n              matchingFields[matchingFieldRef] = new lunr.MatchData (expandedTerm, field, metadata)\n            } else {\n              fieldMatch.add(expandedTerm, field, metadata)\n            }\n\n          }\n\n          termFieldCache[termField] = true\n        }\n      }\n    }\n  }\n\n  var matchingFieldRefs = Object.keys(matchingFields),\n      results = [],\n      matches = Object.create(null)\n\n  for (var i = 0; i < matchingFieldRefs.length; i++) {\n    /*\n     * Currently we have document fields that match the query, but we\n     * need to return documents. The matchData and scores are combined\n     * from multiple fields belonging to the same document.\n     *\n     * Scores are calculated by field, using the query vectors created\n     * above, and combined into a final document score using addition.\n     */\n    var fieldRef = lunr.FieldRef.fromString(matchingFieldRefs[i]),\n        docRef = fieldRef.docRef,\n        fieldVector = this.fieldVectors[fieldRef],\n        score = queryVectors[fieldRef.fieldName].similarity(fieldVector),\n        docMatch\n\n    if ((docMatch = matches[docRef]) !== undefined) {\n      docMatch.score += score\n      docMatch.matchData.combine(matchingFields[fieldRef])\n    } else {\n      var match = {\n        ref: docRef,\n        score: score,\n        matchData: matchingFields[fieldRef]\n      }\n      matches[docRef] = match\n      results.push(match)\n    }\n  }\n\n  /*\n   * Sort the results objects by score, highest first.\n   */\n  return results.sort(function (a, b) {\n    return b.score - a.score\n  })\n}\n\n/**\n * Prepares the index for JSON serialization.\n *\n * The schema for this JSON blob will be described in a\n * separate JSON schema file.\n *\n * @returns {Object}\n */\nlunr.Index.prototype.toJSON = function () {\n  var invertedIndex = Object.keys(this.invertedIndex)\n    .sort()\n    .map(function (term) {\n      return [term, this.invertedIndex[term]]\n    }, this)\n\n  var fieldVectors = Object.keys(this.fieldVectors)\n    .map(function (ref) {\n      return [ref, this.fieldVectors[ref].toJSON()]\n    }, this)\n\n  return {\n    version: lunr.version,\n    fields: this.fields,\n    fieldVectors: fieldVectors,\n    invertedIndex: invertedIndex,\n    pipeline: this.pipeline.toJSON()\n  }\n}\n\n/**\n * Loads a previously serialized lunr.Index\n *\n * @param {Object} serializedIndex - A previously serialized lunr.Index\n * @returns {lunr.Index}\n */\nlunr.Index.load = function (serializedIndex) {\n  var attrs = {},\n      fieldVectors = {},\n      serializedVectors = serializedIndex.fieldVectors,\n      invertedIndex = {},\n      serializedInvertedIndex = serializedIndex.invertedIndex,\n      tokenSetBuilder = new lunr.TokenSet.Builder,\n      pipeline = lunr.Pipeline.load(serializedIndex.pipeline)\n\n  if (serializedIndex.version != lunr.version) {\n    lunr.utils.warn(\"Version mismatch when loading serialised index. Current version of lunr '\" + lunr.version + \"' does not match serialized index '\" + serializedIndex.version + \"'\")\n  }\n\n  for (var i = 0; i < serializedVectors.length; i++) {\n    var tuple = serializedVectors[i],\n        ref = tuple[0],\n        elements = tuple[1]\n\n    fieldVectors[ref] = new lunr.Vector(elements)\n  }\n\n  for (var i = 0; i < serializedInvertedIndex.length; i++) {\n    var tuple = serializedInvertedIndex[i],\n        term = tuple[0],\n        posting = tuple[1]\n\n    tokenSetBuilder.insert(term)\n    invertedIndex[term] = posting\n  }\n\n  tokenSetBuilder.finish()\n\n  attrs.fields = serializedIndex.fields\n\n  attrs.fieldVectors = fieldVectors\n  attrs.invertedIndex = invertedIndex\n  attrs.tokenSet = tokenSetBuilder.root\n  attrs.pipeline = pipeline\n\n  return new lunr.Index(attrs)\n}\n/*!\n * lunr.Builder\n * Copyright (C) 2017 Oliver Nightingale\n */\n\n/**\n * lunr.Builder performs indexing on a set of documents and\n * returns instances of lunr.Index ready for querying.\n *\n * All configuration of the index is done via the builder, the\n * fields to index, the document reference, the text processing\n * pipeline and document scoring parameters are all set on the\n * builder before indexing.\n *\n * @constructor\n * @property {string} _ref - Internal reference to the document reference field.\n * @property {string[]} _fields - Internal reference to the document fields to index.\n * @property {object} invertedIndex - The inverted index maps terms to document fields.\n * @property {object} documentTermFrequencies - Keeps track of document term frequencies.\n * @property {object} documentLengths - Keeps track of the length of documents added to the index.\n * @property {lunr.tokenizer} tokenizer - Function for splitting strings into tokens for indexing.\n * @property {lunr.Pipeline} pipeline - The pipeline performs text processing on tokens before indexing.\n * @property {lunr.Pipeline} searchPipeline - A pipeline for processing search terms before querying the index.\n * @property {number} documentCount - Keeps track of the total number of documents indexed.\n * @property {number} _b - A parameter to control field length normalization, setting this to 0 disabled normalization, 1 fully normalizes field lengths, the default value is 0.75.\n * @property {number} _k1 - A parameter to control how quickly an increase in term frequency results in term frequency saturation, the default value is 1.2.\n * @property {number} termIndex - A counter incremented for each unique term, used to identify a terms position in the vector space.\n * @property {array} metadataWhitelist - A list of metadata keys that have been whitelisted for entry in the index.\n */\nlunr.Builder = function () {\n  this._ref = \"id\"\n  this._fields = []\n  this.invertedIndex = Object.create(null)\n  this.fieldTermFrequencies = {}\n  this.fieldLengths = {}\n  this.tokenizer = lunr.tokenizer\n  this.pipeline = new lunr.Pipeline\n  this.searchPipeline = new lunr.Pipeline\n  this.documentCount = 0\n  this._b = 0.75\n  this._k1 = 1.2\n  this.termIndex = 0\n  this.metadataWhitelist = []\n}\n\n/**\n * Sets the document field used as the document reference. Every document must have this field.\n * The type of this field in the document should be a string, if it is not a string it will be\n * coerced into a string by calling toString.\n *\n * The default ref is 'id'.\n *\n * The ref should _not_ be changed during indexing, it should be set before any documents are\n * added to the index. Changing it during indexing can lead to inconsistent results.\n *\n * @param {string} ref - The name of the reference field in the document.\n */\nlunr.Builder.prototype.ref = function (ref) {\n  this._ref = ref\n}\n\n/**\n * Adds a field to the list of document fields that will be indexed. Every document being\n * indexed should have this field. Null values for this field in indexed documents will\n * not cause errors but will limit the chance of that document being retrieved by searches.\n *\n * All fields should be added before adding documents to the index. Adding fields after\n * a document has been indexed will have no effect on already indexed documents.\n *\n * @param {string} field - The name of a field to index in all documents.\n */\nlunr.Builder.prototype.field = function (field) {\n  this._fields.push(field)\n}\n\n/**\n * A parameter to tune the amount of field length normalisation that is applied when\n * calculating relevance scores. A value of 0 will completely disable any normalisation\n * and a value of 1 will fully normalise field lengths. The default is 0.75. Values of b\n * will be clamped to the range 0 - 1.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.b = function (number) {\n  if (number < 0) {\n    this._b = 0\n  } else if (number > 1) {\n    this._b = 1\n  } else {\n    this._b = number\n  }\n}\n\n/**\n * A parameter that controls the speed at which a rise in term frequency results in term\n * frequency saturation. The default value is 1.2. Setting this to a higher value will give\n * slower saturation levels, a lower value will result in quicker saturation.\n *\n * @param {number} number - The value to set for this tuning parameter.\n */\nlunr.Builder.prototype.k1 = function (number) {\n  this._k1 = number\n}\n\n/**\n * Adds a document to the index.\n *\n * Before adding fields to the index the index should have been fully setup, with the document\n * ref and all fields to index already having been specified.\n *\n * The document must have a field name as specified by the ref (by default this is 'id') and\n * it should have all fields defined for indexing, though null or undefined values will not\n * cause errors.\n *\n * @param {object} doc - The document to add to the index.\n */\nlunr.Builder.prototype.add = function (doc) {\n  var docRef = doc[this._ref]\n\n  this.documentCount += 1\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var fieldName = this._fields[i],\n        field = doc[fieldName],\n        tokens = this.tokenizer(field),\n        terms = this.pipeline.run(tokens),\n        fieldRef = new lunr.FieldRef (docRef, fieldName),\n        fieldTerms = Object.create(null)\n\n    this.fieldTermFrequencies[fieldRef] = fieldTerms\n    this.fieldLengths[fieldRef] = 0\n\n    // store the length of this field for this document\n    this.fieldLengths[fieldRef] += terms.length\n\n    // calculate term frequencies for this field\n    for (var j = 0; j < terms.length; j++) {\n      var term = terms[j]\n\n      if (fieldTerms[term] == undefined) {\n        fieldTerms[term] = 0\n      }\n\n      fieldTerms[term] += 1\n\n      // add to inverted index\n      // create an initial posting if one doesn't exist\n      if (this.invertedIndex[term] == undefined) {\n        var posting = Object.create(null)\n        posting[\"_index\"] = this.termIndex\n        this.termIndex += 1\n\n        for (var k = 0; k < this._fields.length; k++) {\n          posting[this._fields[k]] = Object.create(null)\n        }\n\n        this.invertedIndex[term] = posting\n      }\n\n      // add an entry for this term/fieldName/docRef to the invertedIndex\n      if (this.invertedIndex[term][fieldName][docRef] == undefined) {\n        this.invertedIndex[term][fieldName][docRef] = Object.create(null)\n      }\n\n      // store all whitelisted metadata about this token in the\n      // inverted index\n      for (var l = 0; l < this.metadataWhitelist.length; l++) {\n        var metadataKey = this.metadataWhitelist[l],\n            metadata = term.metadata[metadataKey]\n\n        if (this.invertedIndex[term][fieldName][docRef][metadataKey] == undefined) {\n          this.invertedIndex[term][fieldName][docRef][metadataKey] = []\n        }\n\n        this.invertedIndex[term][fieldName][docRef][metadataKey].push(metadata)\n      }\n    }\n\n  }\n}\n\n/**\n * Calculates the average document length for this index\n *\n * @private\n */\nlunr.Builder.prototype.calculateAverageFieldLengths = function () {\n\n  var fieldRefs = Object.keys(this.fieldLengths),\n      numberOfFields = fieldRefs.length,\n      accumulator = {},\n      documentsWithField = {}\n\n  for (var i = 0; i < numberOfFields; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName\n\n    documentsWithField[field] || (documentsWithField[field] = 0)\n    documentsWithField[field] += 1\n\n    accumulator[field] || (accumulator[field] = 0)\n    accumulator[field] += this.fieldLengths[fieldRef]\n  }\n\n  for (var i = 0; i < this._fields.length; i++) {\n    var field = this._fields[i]\n    accumulator[field] = accumulator[field] / documentsWithField[field]\n  }\n\n  this.averageFieldLength = accumulator\n}\n\n/**\n * Builds a vector space model of every document using lunr.Vector\n *\n * @private\n */\nlunr.Builder.prototype.createFieldVectors = function () {\n  var fieldVectors = {},\n      fieldRefs = Object.keys(this.fieldTermFrequencies),\n      fieldRefsLength = fieldRefs.length,\n      termIdfCache = Object.create(null)\n\n  for (var i = 0; i < fieldRefsLength; i++) {\n    var fieldRef = lunr.FieldRef.fromString(fieldRefs[i]),\n        field = fieldRef.fieldName,\n        fieldLength = this.fieldLengths[fieldRef],\n        fieldVector = new lunr.Vector,\n        termFrequencies = this.fieldTermFrequencies[fieldRef],\n        terms = Object.keys(termFrequencies),\n        termsLength = terms.length\n\n    for (var j = 0; j < termsLength; j++) {\n      var term = terms[j],\n          tf = termFrequencies[term],\n          termIndex = this.invertedIndex[term]._index,\n          idf, score, scoreWithPrecision\n\n      if (termIdfCache[term] === undefined) {\n        idf = lunr.idf(this.invertedIndex[term], this.documentCount)\n        termIdfCache[term] = idf\n      } else {\n        idf = termIdfCache[term]\n      }\n\n      score = idf * ((this._k1 + 1) * tf) / (this._k1 * (1 - this._b + this._b * (fieldLength / this.averageFieldLength[field])) + tf)\n      scoreWithPrecision = Math.round(score * 1000) / 1000\n      // Converts 1.23456789 to 1.234.\n      // Reducing the precision so that the vectors take up less\n      // space when serialised. Doing it now so that they behave\n      // the same before and after serialisation. Also, this is\n      // the fastest approach to reducing a number's precision in\n      // JavaScript.\n\n      fieldVector.insert(termIndex, scoreWithPrecision)\n    }\n\n    fieldVectors[fieldRef] = fieldVector\n  }\n\n  this.fieldVectors = fieldVectors\n}\n\n/**\n * Creates a token set of all tokens in the index using lunr.TokenSet\n *\n * @private\n */\nlunr.Builder.prototype.createTokenSet = function () {\n  this.tokenSet = lunr.TokenSet.fromArray(\n    Object.keys(this.invertedIndex).sort()\n  )\n}\n\n/**\n * Builds the index, creating an instance of lunr.Index.\n *\n * This completes the indexing process and should only be called\n * once all documents have been added to the index.\n *\n * @returns {lunr.Index}\n */\nlunr.Builder.prototype.build = function () {\n  this.calculateAverageFieldLengths()\n  this.createFieldVectors()\n  this.createTokenSet()\n\n  return new lunr.Index({\n    invertedIndex: this.invertedIndex,\n    fieldVectors: this.fieldVectors,\n    tokenSet: this.tokenSet,\n    fields: this._fields,\n    pipeline: this.searchPipeline\n  })\n}\n\n/**\n * Applies a plugin to the index builder.\n *\n * A plugin is a function that is called with the index builder as its context.\n * Plugins can be used to customise or extend the behaviour of the index\n * in some way. A plugin is just a function, that encapsulated the custom\n * behaviour that should be applied when building the index.\n *\n * The plugin function will be called with the index builder as its argument, additional\n * arguments can also be passed when calling use. The function will be called\n * with the index builder as its context.\n *\n * @param {Function} plugin The plugin to apply.\n */\nlunr.Builder.prototype.use = function (fn) {\n  var args = Array.prototype.slice.call(arguments, 1)\n  args.unshift(this)\n  fn.apply(this, args)\n}\n/**\n * Contains and collects metadata about a matching document.\n * A single instance of lunr.MatchData is returned as part of every\n * lunr.Index~Result.\n *\n * @constructor\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n * @property {object} metadata - A cloned collection of metadata associated with this document.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData = function (term, field, metadata) {\n  var clonedMetadata = Object.create(null),\n      metadataKeys = Object.keys(metadata)\n\n  // Cloning the metadata to prevent the original\n  // being mutated during match data combination.\n  // Metadata is kept in an array within the inverted\n  // index so cloning the data can be done with\n  // Array#slice\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n    clonedMetadata[key] = metadata[key].slice()\n  }\n\n  this.metadata = Object.create(null)\n  this.metadata[term] = Object.create(null)\n  this.metadata[term][field] = clonedMetadata\n}\n\n/**\n * An instance of lunr.MatchData will be created for every term that matches a\n * document. However only one instance is required in a lunr.Index~Result. This\n * method combines metadata from another instance of lunr.MatchData with this\n * objects metadata.\n *\n * @param {lunr.MatchData} otherMatchData - Another instance of match data to merge with this one.\n * @see {@link lunr.Index~Result}\n */\nlunr.MatchData.prototype.combine = function (otherMatchData) {\n  var terms = Object.keys(otherMatchData.metadata)\n\n  for (var i = 0; i < terms.length; i++) {\n    var term = terms[i],\n        fields = Object.keys(otherMatchData.metadata[term])\n\n    if (this.metadata[term] == undefined) {\n      this.metadata[term] = Object.create(null)\n    }\n\n    for (var j = 0; j < fields.length; j++) {\n      var field = fields[j],\n          keys = Object.keys(otherMatchData.metadata[term][field])\n\n      if (this.metadata[term][field] == undefined) {\n        this.metadata[term][field] = Object.create(null)\n      }\n\n      for (var k = 0; k < keys.length; k++) {\n        var key = keys[k]\n\n        if (this.metadata[term][field][key] == undefined) {\n          this.metadata[term][field][key] = otherMatchData.metadata[term][field][key]\n        } else {\n          this.metadata[term][field][key] = this.metadata[term][field][key].concat(otherMatchData.metadata[term][field][key])\n        }\n\n      }\n    }\n  }\n}\n\n/**\n * Add metadata for a term/field pair to this instance of match data.\n *\n * @param {string} term - The term this match data is associated with\n * @param {string} field - The field in which the term was found\n * @param {object} metadata - The metadata recorded about this term in this field\n */\nlunr.MatchData.prototype.add = function (term, field, metadata) {\n  if (!(term in this.metadata)) {\n    this.metadata[term] = Object.create(null)\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  if (!(field in this.metadata[term])) {\n    this.metadata[term][field] = metadata\n    return\n  }\n\n  var metadataKeys = Object.keys(metadata)\n\n  for (var i = 0; i < metadataKeys.length; i++) {\n    var key = metadataKeys[i]\n\n    if (key in this.metadata[term][field]) {\n      this.metadata[term][field][key] = this.metadata[term][field][key].concat(metadata[key])\n    } else {\n      this.metadata[term][field][key] = metadata[key]\n    }\n  }\n}\n/**\n * A lunr.Query provides a programmatic way of defining queries to be performed\n * against a {@link lunr.Index}.\n *\n * Prefer constructing a lunr.Query using the {@link lunr.Index#query} method\n * so the query object is pre-initialized with the right index fields.\n *\n * @constructor\n * @property {lunr.Query~Clause[]} clauses - An array of query clauses.\n * @property {string[]} allFields - An array of all available fields in a lunr.Index.\n */\nlunr.Query = function (allFields) {\n  this.clauses = []\n  this.allFields = allFields\n}\n\n/**\n * Constants for indicating what kind of automatic wildcard insertion will be used when constructing a query clause.\n *\n * This allows wildcards to be added to the beginning and end of a term without having to manually do any string\n * concatenation.\n *\n * The wildcard constants can be bitwise combined to select both leading and trailing wildcards.\n *\n * @constant\n * @default\n * @property {number} wildcard.NONE - The term will have no wildcards inserted, this is the default behaviour\n * @property {number} wildcard.LEADING - Prepend the term with a wildcard, unless a leading wildcard already exists\n * @property {number} wildcard.TRAILING - Append a wildcard to the term, unless a trailing wildcard already exists\n * @see lunr.Query~Clause\n * @see lunr.Query#clause\n * @see lunr.Query#term\n * @example <caption>query term with trailing wildcard</caption>\n * query.term('foo', { wildcard: lunr.Query.wildcard.TRAILING })\n * @example <caption>query term with leading and trailing wildcard</caption>\n * query.term('foo', {\n *   wildcard: lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.wildcard = new String (\"*\")\nlunr.Query.wildcard.NONE = 0\nlunr.Query.wildcard.LEADING = 1\nlunr.Query.wildcard.TRAILING = 2\n\n/**\n * A single clause in a {@link lunr.Query} contains a term and details on how to\n * match that term against a {@link lunr.Index}.\n *\n * @typedef {Object} lunr.Query~Clause\n * @property {string[]} fields - The fields in an index this clause should be matched against.\n * @property {number} [boost=1] - Any boost that should be applied when matching this clause.\n * @property {number} [editDistance] - Whether the term should have fuzzy matching applied, and how fuzzy the match should be.\n * @property {boolean} [usePipeline] - Whether the term should be passed through the search pipeline.\n * @property {number} [wildcard=0] - Whether the term should have wildcards appended or prepended.\n */\n\n/**\n * Adds a {@link lunr.Query~Clause} to this query.\n *\n * Unless the clause contains the fields to be matched all fields will be matched. In addition\n * a default boost of 1 is applied to the clause.\n *\n * @param {lunr.Query~Clause} clause - The clause to add to this query.\n * @see lunr.Query~Clause\n * @returns {lunr.Query}\n */\nlunr.Query.prototype.clause = function (clause) {\n  if (!('fields' in clause)) {\n    clause.fields = this.allFields\n  }\n\n  if (!('boost' in clause)) {\n    clause.boost = 1\n  }\n\n  if (!('usePipeline' in clause)) {\n    clause.usePipeline = true\n  }\n\n  if (!('wildcard' in clause)) {\n    clause.wildcard = lunr.Query.wildcard.NONE\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.LEADING) && (clause.term.charAt(0) != lunr.Query.wildcard)) {\n    clause.term = \"*\" + clause.term\n  }\n\n  if ((clause.wildcard & lunr.Query.wildcard.TRAILING) && (clause.term.slice(-1) != lunr.Query.wildcard)) {\n    clause.term = \"\" + clause.term + \"*\"\n  }\n\n  this.clauses.push(clause)\n\n  return this\n}\n\n/**\n * Adds a term to the current query, under the covers this will create a {@link lunr.Query~Clause}\n * to the list of clauses that make up this query.\n *\n * @param {string} term - The term to add to the query.\n * @param {Object} [options] - Any additional properties to add to the query clause.\n * @returns {lunr.Query}\n * @see lunr.Query#clause\n * @see lunr.Query~Clause\n * @example <caption>adding a single term to a query</caption>\n * query.term(\"foo\")\n * @example <caption>adding a single term to a query and specifying search fields, term boost and automatic trailing wildcard</caption>\n * query.term(\"foo\", {\n *   fields: [\"title\"],\n *   boost: 10,\n *   wildcard: lunr.Query.wildcard.TRAILING\n * })\n */\nlunr.Query.prototype.term = function (term, options) {\n  var clause = options || {}\n  clause.term = term\n\n  this.clause(clause)\n\n  return this\n}\nlunr.QueryParseError = function (message, start, end) {\n  this.name = \"QueryParseError\"\n  this.message = message\n  this.start = start\n  this.end = end\n}\n\nlunr.QueryParseError.prototype = new Error\nlunr.QueryLexer = function (str) {\n  this.lexemes = []\n  this.str = str\n  this.length = str.length\n  this.pos = 0\n  this.start = 0\n  this.escapeCharPositions = []\n}\n\nlunr.QueryLexer.prototype.run = function () {\n  var state = lunr.QueryLexer.lexText\n\n  while (state) {\n    state = state(this)\n  }\n}\n\nlunr.QueryLexer.prototype.sliceString = function () {\n  var subSlices = [],\n      sliceStart = this.start,\n      sliceEnd = this.pos\n\n  for (var i = 0; i < this.escapeCharPositions.length; i++) {\n    sliceEnd = this.escapeCharPositions[i]\n    subSlices.push(this.str.slice(sliceStart, sliceEnd))\n    sliceStart = sliceEnd + 1\n  }\n\n  subSlices.push(this.str.slice(sliceStart, this.pos))\n  this.escapeCharPositions.length = 0\n\n  return subSlices.join('')\n}\n\nlunr.QueryLexer.prototype.emit = function (type) {\n  this.lexemes.push({\n    type: type,\n    str: this.sliceString(),\n    start: this.start,\n    end: this.pos\n  })\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.escapeCharacter = function () {\n  this.escapeCharPositions.push(this.pos - 1)\n  this.pos += 1\n}\n\nlunr.QueryLexer.prototype.next = function () {\n  if (this.pos >= this.length) {\n    return lunr.QueryLexer.EOS\n  }\n\n  var char = this.str.charAt(this.pos)\n  this.pos += 1\n  return char\n}\n\nlunr.QueryLexer.prototype.width = function () {\n  return this.pos - this.start\n}\n\nlunr.QueryLexer.prototype.ignore = function () {\n  if (this.start == this.pos) {\n    this.pos += 1\n  }\n\n  this.start = this.pos\n}\n\nlunr.QueryLexer.prototype.backup = function () {\n  this.pos -= 1\n}\n\nlunr.QueryLexer.prototype.acceptDigitRun = function () {\n  var char, charCode\n\n  do {\n    char = this.next()\n    charCode = char.charCodeAt(0)\n  } while (charCode > 47 && charCode < 58)\n\n  if (char != lunr.QueryLexer.EOS) {\n    this.backup()\n  }\n}\n\nlunr.QueryLexer.prototype.more = function () {\n  return this.pos < this.length\n}\n\nlunr.QueryLexer.EOS = 'EOS'\nlunr.QueryLexer.FIELD = 'FIELD'\nlunr.QueryLexer.TERM = 'TERM'\nlunr.QueryLexer.EDIT_DISTANCE = 'EDIT_DISTANCE'\nlunr.QueryLexer.BOOST = 'BOOST'\n\nlunr.QueryLexer.lexField = function (lexer) {\n  lexer.backup()\n  lexer.emit(lunr.QueryLexer.FIELD)\n  lexer.ignore()\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexTerm = function (lexer) {\n  if (lexer.width() > 1) {\n    lexer.backup()\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n\n  lexer.ignore()\n\n  if (lexer.more()) {\n    return lunr.QueryLexer.lexText\n  }\n}\n\nlunr.QueryLexer.lexEditDistance = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.EDIT_DISTANCE)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexBoost = function (lexer) {\n  lexer.ignore()\n  lexer.acceptDigitRun()\n  lexer.emit(lunr.QueryLexer.BOOST)\n  return lunr.QueryLexer.lexText\n}\n\nlunr.QueryLexer.lexEOS = function (lexer) {\n  if (lexer.width() > 0) {\n    lexer.emit(lunr.QueryLexer.TERM)\n  }\n}\n\n// This matches the separator used when tokenising fields\n// within a document. These should match otherwise it is\n// not possible to search for some tokens within a document.\n//\n// It is possible for the user to change the separator on the\n// tokenizer so it _might_ clash with any other of the special\n// characters already used within the search string, e.g. :.\n//\n// This means that it is possible to change the separator in\n// such a way that makes some words unsearchable using a search\n// string.\nlunr.QueryLexer.termSeparator = lunr.tokenizer.separator\n\nlunr.QueryLexer.lexText = function (lexer) {\n  while (true) {\n    var char = lexer.next()\n\n    if (char == lunr.QueryLexer.EOS) {\n      return lunr.QueryLexer.lexEOS\n    }\n\n    // Escape character is '\\'\n    if (char.charCodeAt(0) == 92) {\n      lexer.escapeCharacter()\n      continue\n    }\n\n    if (char == \":\") {\n      return lunr.QueryLexer.lexField\n    }\n\n    if (char == \"~\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexEditDistance\n    }\n\n    if (char == \"^\") {\n      lexer.backup()\n      if (lexer.width() > 0) {\n        lexer.emit(lunr.QueryLexer.TERM)\n      }\n      return lunr.QueryLexer.lexBoost\n    }\n\n    if (char.match(lunr.QueryLexer.termSeparator)) {\n      return lunr.QueryLexer.lexTerm\n    }\n  }\n}\n\nlunr.QueryParser = function (str, query) {\n  this.lexer = new lunr.QueryLexer (str)\n  this.query = query\n  this.currentClause = {}\n  this.lexemeIdx = 0\n}\n\nlunr.QueryParser.prototype.parse = function () {\n  this.lexer.run()\n  this.lexemes = this.lexer.lexemes\n\n  var state = lunr.QueryParser.parseFieldOrTerm\n\n  while (state) {\n    state = state(this)\n  }\n\n  return this.query\n}\n\nlunr.QueryParser.prototype.peekLexeme = function () {\n  return this.lexemes[this.lexemeIdx]\n}\n\nlunr.QueryParser.prototype.consumeLexeme = function () {\n  var lexeme = this.peekLexeme()\n  this.lexemeIdx += 1\n  return lexeme\n}\n\nlunr.QueryParser.prototype.nextClause = function () {\n  var completedClause = this.currentClause\n  this.query.clause(completedClause)\n  this.currentClause = {}\n}\n\nlunr.QueryParser.parseFieldOrTerm = function (parser) {\n  var lexeme = parser.peekLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  switch (lexeme.type) {\n    case lunr.QueryLexer.FIELD:\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expected either a field or a term, found \" + lexeme.type\n\n      if (lexeme.str.length >= 1) {\n        errorMessage += \" with value '\" + lexeme.str + \"'\"\n      }\n\n      throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n}\n\nlunr.QueryParser.parseField = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  if (parser.query.allFields.indexOf(lexeme.str) == -1) {\n    var possibleFields = parser.query.allFields.map(function (f) { return \"'\" + f + \"'\" }).join(', '),\n        errorMessage = \"unrecognised field '\" + lexeme.str + \"', possible fields: \" + possibleFields\n\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.fields = [lexeme.str]\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    var errorMessage = \"expecting term, found nothing\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      return lunr.QueryParser.parseTerm\n    default:\n      var errorMessage = \"expecting term, found '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseTerm = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  parser.currentClause.term = lexeme.str.toLowerCase()\n\n  if (lexeme.str.indexOf(\"*\") != -1) {\n    parser.currentClause.usePipeline = false\n  }\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseEditDistance = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var editDistance = parseInt(lexeme.str, 10)\n\n  if (isNaN(editDistance)) {\n    var errorMessage = \"edit distance must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.editDistance = editDistance\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\nlunr.QueryParser.parseBoost = function (parser) {\n  var lexeme = parser.consumeLexeme()\n\n  if (lexeme == undefined) {\n    return\n  }\n\n  var boost = parseInt(lexeme.str, 10)\n\n  if (isNaN(boost)) {\n    var errorMessage = \"boost must be numeric\"\n    throw new lunr.QueryParseError (errorMessage, lexeme.start, lexeme.end)\n  }\n\n  parser.currentClause.boost = boost\n\n  var nextLexeme = parser.peekLexeme()\n\n  if (nextLexeme == undefined) {\n    parser.nextClause()\n    return\n  }\n\n  switch (nextLexeme.type) {\n    case lunr.QueryLexer.TERM:\n      parser.nextClause()\n      return lunr.QueryParser.parseTerm\n    case lunr.QueryLexer.FIELD:\n      parser.nextClause()\n      return lunr.QueryParser.parseField\n    case lunr.QueryLexer.EDIT_DISTANCE:\n      return lunr.QueryParser.parseEditDistance\n    case lunr.QueryLexer.BOOST:\n      return lunr.QueryParser.parseBoost\n    default:\n      var errorMessage = \"Unexpected lexeme type '\" + nextLexeme.type + \"'\"\n      throw new lunr.QueryParseError (errorMessage, nextLexeme.start, nextLexeme.end)\n  }\n}\n\n  /**\n   * export the module via AMD, CommonJS or as a browser global\n   * Export code from https://github.com/umdjs/umd/blob/master/returnExports.js\n   */\n  ;(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      // AMD. Register as an anonymous module.\n      define(factory)\n    } else if (typeof exports === 'object') {\n      /**\n       * Node. Does not work with strict CommonJS, but\n       * only CommonJS-like enviroments that support module.exports,\n       * like Node.\n       */\n      module.exports = factory()\n    } else {\n      // Browser globals (root is window)\n      root.lunr = factory()\n    }\n  }(this, function () {\n    /**\n     * Just return a value to define the module export.\n     * This example returns an object, but the module\n     * can return a function as the exported value.\n     */\n    return lunr\n  }))\n})();\n\n\n\t// Adapted from https://github.com/pseudonym117/Levenshtein\n(function(root, factory){\n    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n        define(function(){\n            return factory(root);\n        });\n    } else if (typeof module == 'object' && module && module.exports) {\n        module.exports = factory(root);\n    } else {\n        root.Levenshtein = factory(root);\n    }\n}(this, function(root){\n\n    function forEach( array, fn ) { var i, length\n        i = -1\n        length = array.length\n        while ( ++i < length )\n            fn( array[ i ], i, array )\n    }\n\n    function map( array, fn ) { var result\n        result = Array( array.length )\n        forEach( array, function ( val, i, array ) {\n            result.push( fn( val, i, array ) )\n        })\n        return result\n    }\n\n    function reduce( array, fn, accumulator ) {\n        forEach( array, function( val, i, array ) {\n            accumulator = fn( val, i, array )\n        })\n        return accumulator\n    }\n\n    // For string mode\n    function getChar(str, idx) {\n        return str.charAt(idx);\n    }\n\n    // For array mode\n    function getArrayMember(arr, idx) {\n        return arr[idx];\n    }\n\n    // Levenshtein distance\n    function Levenshtein( str_m, str_n ) {\n        var previous, current, matrix, getElem\n        // Set to string or array mode\n        if (typeof str_m === \"string\" && typeof str_n === \"string\") {\n            getElem = getChar;\n        } else if (typeof str_m === \"object\" && typeof str_n === \"object\") {\n            getElem = getArrayMember;\n        } else {\n            throw \"Levensthtein: input must be two strings or two arrays\"\n        }\n        // Constructor\n        matrix = this._matrix = []\n\n        // Sanity checks\n        if ( str_m == str_n )\n            return this.distance = 0\n        else if ( str_m == '' )\n            return this.distance = str_n.length\n        else if ( str_n == '' )\n            return this.distance = str_m.length\n        else {\n            // Danger Will Robinson\n            previous = [ 0 ]\n            forEach( str_m, function( v, i ) { i++, previous[ i ] = i } )\n\n            matrix[0] = previous\n            forEach( str_n, function( n_val, n_idx ) {\n                current = [ ++n_idx ]\n                forEach( str_m, function( m_val, m_idx ) {\n                    m_idx++\n                    if ( getElem(str_m, m_idx - 1) == getElem(str_n, n_idx - 1) )\n                        current[ m_idx ] = previous[ m_idx - 1 ]\n                    else\n                        current[ m_idx ] = Math.min\n                            ( previous[ m_idx ] + 1        // Deletion\n                            , current[ m_idx - 1 ] + 1     // Insertion\n                            , previous[ m_idx - 1 ] + 1    // Subtraction\n                            )\n                })\n                previous = current\n                matrix[ matrix.length ] = previous\n            })\n\n            return this.distance = current[ current.length - 1 ]\n        }\n    }\n\n    Levenshtein.prototype.toString = Levenshtein.prototype.inspect = function inspect ( no_print ) { var matrix, max, buff, sep, rows\n        matrix = this.getMatrix()\n        max = reduce( matrix,function( m, o ) {\n            return Math.max( m, reduce( o, Math.max, 0 ) )\n        }, 0 )\n        buff = Array( ( max + '' ).length ).join( ' ' )\n\n        sep = []\n        while ( sep.length < (matrix[0] && matrix[0].length || 0) )\n            sep[ sep.length ] = Array( buff.length + 1 ).join( '-' )\n        sep = sep.join( '-+' ) + '-'\n\n        rows = map( matrix, function( row ) { var cells\n            cells = map( row, function( cell ) {\n                return ( buff + cell ).slice( - buff.length )\n            })\n            return cells.join( ' |' ) + ' '\n        })\n\n        return rows.join( \"\\n\" + sep + \"\\n\" )\n    }\n\n    // steps to get from string 1 to string 2\n    Levenshtein.prototype.getSteps = function()     {\n        var steps, matrix, x, y, u, l, d, min\n        steps = []\n        matrix = this.getMatrix()\n        x = matrix.length - 1\n        y = matrix[0].length - 1\n        while(x !== 0 || y !== 0)     {\n            u = y > 0 ? matrix[x][y-1] : Number.MAX_VALUE\n            l = x > 0 ? matrix[x-1][y] : Number.MAX_VALUE\n            d = y > 0 && x > 0 ? matrix[x-1][y-1] : Number.MAX_VALUE\n            min = Math.min(u, l, d)\n            if(min === d) {\n                if(d < matrix[x][y]) {\n                    steps.push(['substitute', y, x])\n                }//  else steps.push(['no-op', y, x])\n                x--\n                y--\n            } else if(min === l) {\n                steps.push(['insert', y, x])\n                x--\n            } else {\n                steps.push(['delete', y, x])\n                y--\n            }\n        }\n        return steps\n    }\n\n    Levenshtein.prototype.getMatrix = function () {\n        return this._matrix.slice()\n    }\n\n    Levenshtein.prototype.valueOf = function() {\n        return this.distance\n    }\n\n    return Levenshtein\n\n}));\n\n\n\t//This is the main plugin definition\n\t$.fn.ghostHunter \t= function( options ) {\n\n\t\t//Here we use jQuery's extend to set default values if they weren't set by the user\n\t\tvar opts \t\t= $.extend( {}, $.fn.ghostHunter.defaults, options );\n\t\tif( opts.results )\n\t\t{\n\t\t\tpluginMethods.init( this , opts );\n\t\t\treturn pluginMethods;\n\t\t}\n\t};\n\t// If the Ghost instance is in a subpath of the site, set subpath\n\t// as the path to the site with a leading slash and no trailing slash\n\t// (i.e. \"/path/to/instance\").\n\t$.fn.ghostHunter.defaults = {\n\t\tresultsData\t\t\t: false,\n\t\tonPageLoad\t\t\t: false,\n\t\tonKeyUp\t\t\t\t: false,\n\t\tresult_template \t: \"<a id='gh-{{ref}}' class='gh-search-item' href='{{link}}'><p><h2>{{title}}</h2><h4>{{prettyPubDate}}</h4></p></a>\",\n\t\tinfo_template\t\t: \"<p>Number of posts found: {{amount}}</p>\",\n\t\tdisplaySearchInfo\t: true,\n\t\tzeroResultsInfo\t\t: true,\n\t\tbefore\t\t\t\t: false,\n\t\tonComplete\t\t\t: false,\n\t\tfilterfields\t\t: false,\n\t\tsubpath\t\t\t\t: \"\",\n\t\titem_preprocessor\t: false,\n\t\tindexing_start\t\t: false,\n\t\tindexing_end\t\t: false,\n\t\tincludebodysearch\t: false\n\t};\n\tvar prettyDate = function(date) {\n\t\tvar d = new Date(date);\n\t\tvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\t\t\treturn d.getDate() + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();\n\t};\n\n\tvar getSubpathKey = function(str) {\n\t\treturn str.replace(/^\\//, \"\").replace(/\\//g, \"-\")\n\t};\n\n\tvar lastTimeoutID = null;\n\n\t// We add a prefix to new IDs and remove it after a set of\n\t// updates is complete, just in case a browser freaks over\n\t// duplicate IDs in the DOM.\n\tvar settleIDs = function() {\n\t\t$('.gh-search-item').each(function(){\n\t\t\tvar oldAttr = this.getAttribute('id');\n\t\t\tvar newAttr = oldAttr.replace(/^new-/, \"\");\n\t\t\tthis.setAttribute('id', newAttr);\n\t\t});\n\t};\n\tvar updateSearchList = function(listItems, apiData, steps) {\n\t\tfor (var i=0,ilen=steps.length;i<ilen;i++) {\n\t\t\tvar step = steps[i];\n\t\t\tif (step[0] == \"delete\") {\n\t\t\t\tlistItems.eq(step[1]-1).remove();\n\t\t\t} else {\n\t\t\t\tvar lunrref = apiData[step[2]-1].ref;\n\t\t\t\tvar postData = this.blogData[lunrref];\n\t\t\t\tvar html = this.format(this.result_template,postData);\n\t\t\t\tif (step[0] === \"substitute\") {\n\t\t\t\t\tlistItems.eq(step[1]-1).replaceWith(html);\n\t\t\t\t} else if (step[0] === \"insert\") {\n\t\t\t\t\tvar pos;\n\t\t\t\t\tif (step[1] === 0) {\n\t\t\t\t\t\tpos = null;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpos = (step[1]-1)\n\t\t\t\t\t}\n\t\t\t\t\tlistItems.eq(pos).after(html);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsettleIDs();\n\t}\n\n\tvar grabAndIndex = function(){\n\t\t// console.log('ghostHunter: grabAndIndex');\n\t\tthis.blogData = {};\n\t\tthis.latestPost = 0;\n    var url = \"/ghost/api/v2/content/posts/?key=\" + ghosthunter_key + \"&limit=all&include=tags\";\n\n\t\tvar params = {\n\t\t\tlimit: \"all\",\n\t\t\tinclude: \"tags\",\n\t\t};\n\t\tif ( this.includebodysearch ){\n\t\t\tparams.formats=[\"plaintext\"]\n      url += \"&formats=plaintext\"\n\t\t} else {\n\t\t\tparams.formats=[\"\"]\n\t\t}\n\t\tvar me = this;\n    $.get(url).done(function(data){\n\t\t\tvar idxSrc = data.posts;\n\t\t\t// console.log(\"ghostHunter: indexing all posts\")\n\t\t\tme.index = lunr(function () {\n\t\t\t\tthis.ref('id');\n\t\t\t\tthis.field('title');\n\t\t\t\tthis.field('description');\n\t\t\t\tif (me.includebodysearch){\n\t\t\t\tthis.field('plaintext');\n\t\t\t\t}\n\t\t\t\tthis.field('pubDate');\n\t\t\t\tthis.field('tag');\n\t\t\t\tidxSrc.forEach(function (arrayItem) {\n\t\t\t\t\t// console.log(\"start indexing an item: \" + arrayItem.id);\n\t\t\t\t\t// Track the latest value of updated_at,  to stash in localStorage\n\t\t\t\t\tvar itemDate = new Date(arrayItem.updated_at).getTime();\n\t\t\t\t\tvar recordedDate = new Date(me.latestPost).getTime();\n\t\t\t\t\tif (itemDate > recordedDate) {\n\t\t\t\t\t\tme.latestPost = arrayItem.updated_at;\n\t\t\t\t\t}\n\t\t\t\t\tvar tag_arr = arrayItem.tags.map(function(v) {\n\t\t\t\t\t\treturn v.name; // `tag` object has an `name` property which is the value of tag. If you also want other info, check API and get that property\n\t\t\t\t\t})\n\t\t\t\t\tif(arrayItem.meta_description == null) { arrayItem.meta_description = '' };\n\t\t\t\t\tvar category = tag_arr.join(\", \");\n\t\t\t\t\tif (category.length < 1){\n\t\t\t\t\t\tcategory = \"undefined\";\n\t\t\t\t\t}\n\t\t\t\t\tvar parsedData \t= {\n\t\t\t\t\t\tid \t\t\t: String(arrayItem.id),\n\t\t\t\t\t\ttitle \t\t: String(arrayItem.title),\n\t\t\t\t\t\tdescription\t: String(arrayItem.custom_excerpt),\n\t\t\t\t\t\tpubDate \t: String(arrayItem.published_at),\n\t\t\t\t\t\ttag \t\t: category\n\t\t\t\t\t}\n\t\t\t\t\tif  ( me.includebodysearch ){\n\t\t\t\t\t\tparsedData.plaintext=String(arrayItem.plaintext);\n\t\t\t\t\t}\n\t\t\t\t\tthis.add(parsedData)\n\t\t\t\t\tvar localUrl = me.subpath + arrayItem.url\n\t\t\t\t\tme.blogData[arrayItem.id] = {\n\t\t\t\t\t\ttitle: arrayItem.title,\n\t\t\t\t\t\tdescription: arrayItem.custom_excerpt,\n\t\t\t\t\t\tpubDate: prettyDate(parsedData.pubDate),\n\t\t\t\t\t\tlink: localUrl,\n\t\t\t\t\t\ttags: tag_arr\n\t\t\t\t\t};\n\t\t\t\t\t// If there is a metadata \"pre\"-processor for the item, run it here.\n\t\t\t\t\tif (me.item_preprocessor) {\n\t\t\t\t\t\tObject.assign(me.blogData[arrayItem.id], me.item_preprocessor(arrayItem));\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(\"done indexing the item\");\n\t\t\t\t}, this);\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tvar subpathKey = getSubpathKey(me.subpath);\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_lunrIndex\"), JSON.stringify(me.index));\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_blogData\"), JSON.stringify(me.blogData));\n\t\t\t\tlocalStorage.setItem((\"ghost_\" + subpathKey + \"_latestPost\"), me.latestPost);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(\"ghostHunter: save to localStorage failed: \" + e);\n\t\t\t}\n\t\t\tif (me.indexing_end) {\n\t\t\t\tme.indexing_end();\n\t\t\t}\n\t\t\tme.isInit = true;\n\t\t});\n\t}\n\n\tvar pluginMethods\t= {\n\n\t\tisInit\t\t\t: false,\n\n\t\tinit\t\t\t: function( target , opts ){\n\t\t\tvar that = this;\n\t\t\tthat.target = target;\n\t\t\tObject.assign(this, opts);\n\t\t\t// console.log(\"ghostHunter: init\");\n\t\t\tif ( opts.onPageLoad ) {\n\t\t\t\tfunction miam () {\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t}\n\t\t\t\twindow.setTimeout(miam, 1);\n\t\t\t} else {\n\t\t\t\ttarget.focus(function(){\n\t\t\t\t\tthat.loadAPI();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttarget.closest(\"form\").submit(function(e){\n\t\t\t\te.preventDefault();\n\t\t\t\tthat.find(target.val());\n\t\t\t});\n\n\t\t\tif( opts.onKeyUp ) {\n\t\t\t\t// In search-as-you-type mode, the Enter key is meaningless,\n\t\t\t\t// so we disable it in the search field. If enabled, some browsers\n\t\t\t\t// will save data to history (even when autocomplete=\"false\"), which\n\t\t\t\t// is an intrusive headache, particularly on mobile.\n\t\t\t\ttarget.keydown(function(event){\n\t\t\t\t\tif (event.which === 13) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttarget.keyup(function(event) {\n\t\t\t\t\tthat.find(target.val());\n\t\t\t\t});\n\n\t\t\t}\n\n\t\t},\n\n\t\tloadAPI\t\t\t: function(){\n\t\t\t// console.log('ghostHunter: loadAPI');\n\t\t\tif(!this.isInit) {\n\t\t\t\t// console.log('ghostHunter: this.isInit is true');\n\t\t\t\tif (this.indexing_start) {\n\t\t\t\t\tthis.indexing_start();\n\t\t\t\t}\n\t\t\t\t// If isInit is falsy, check for data in localStore,\n\t\t\t\t// parse into memory, and declare isInit to be true.\n\t\t\t\ttry {\n\t\t\t\t\tvar subpathKey = getSubpathKey(this.subpath);\n\t\t\t\t\tthis.index = localStorage.getItem((\"ghost_\" + subpathKey + \"_lunrIndex\"));\n\t\t\t\t\tthis.blogData = localStorage.getItem((\"ghost_\" + subpathKey + \"_blogData\"));\n\t\t\t\t\tthis.latestPost = localStorage.getItem((\"ghost_\" + subpathKey + \"_latestPost\"));\n\t\t\t\t\tif (this.latestPost && this.index && this.blogData) {\n\t\t\t\t\t\tthis.latestPost = this.latestPost;\n\t\t\t\t\t\tthis.index = lunr.Index.load(JSON.parse(this.index));\n\t\t\t\t\t\tthis.blogData = JSON.parse(this.blogData);\n\t\t\t\t\t\tthis.isInit = true;\n\t\t\t\t\t}\n\t\t\t\t} catch (e){\n\t\t\t\t\tconsole.warn(\"ghostHunter: retrieve from localStorage failed: \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.isInit) {\n\t\t\t\t// console.log('ghostHunter: this.isInit recheck is true');\n\t\t\t\t// Check if there are new or edited posts\n\t\t\t\tvar params = {\n\t\t\t\t\tlimit: \"all\",\n\t\t\t\t\tfilter: \"updated_at:>\\'\" + this.latestPost.replace(/\\..*/, \"\").replace(/T/, \" \") + \"\\'\",\n\t\t\t\t\tfields: \"id\"\n\t\t\t\t};\n\n        var url = \"/ghost/api/v2/content/posts/?key=\" + ghosthunter_key + \"&limit=all&fields=id\" + \"&filter\" + \"updated_at:>\\'\" + this.latestPost.replace(/\\..*/, \"\").replace(/T/, \" \") + \"\\'\";\n\n\t\t\t\tvar me = this;\n        $.get(url).done(function(data){\n\t\t\t\t\tif (data.posts.length > 0) {\n\t\t\t\t\t\tgrabAndIndex.call(me);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (me.indexing_end) {\n\t\t\t\t\t\t\tme.indexing_end();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tme.isInit = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// console.log('ghostHunter: this.isInit recheck is false');\n\t\t\t\tgrabAndIndex.call(this)\n\t\t\t}\n\t\t},\n\n\n\t\tfind \t\t \t: function(value){\n\t\t\tclearTimeout(lastTimeoutID);\n\t\t\tif (!value) {\n\t\t\t\tvalue = \"\";\n\t\t\t};\n\t\t\tvalue = value.toLowerCase();\n\t\t\tlastTimeoutID = setTimeout(function() {\n\t\t\t\t// Query strategy is lifted from comments on a lunr.js issue: https://github.com/olivernn/lunr.js/issues/256\n\t\t\t\tvar thingsFound = [];\n\t\t\t\t// The query interface expects single terms, so we split.\n\t\t\t\tvar valueSplit = value.split(/\\s+/);\n\t\t\t\tfor (var i=0,ilen=valueSplit.length;i<ilen;i++) {\n\t\t\t\t\t// Fetch a list of matches for each term.\n\t\t\t\t\tvar v = valueSplit[i];\n\t\t\t\t\tif (!v) continue;\n\t\t\t\t\tthingsFound.push(this.index.query(function (q) {\n\t\t\t\t\t\t// For an explanation of lunr indexing options, see the lunr.js\n\t\t\t\t\t\t// documentation at https://lunrjs.com/docs/lunr.Query.html#~Clause\n\n\t\t\t\t\t\t// look for an exact match and apply a large positive boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: true,\n\t\t\t\t\t\t\tboost: 100,\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// look for terms that match the beginning of this queryTerm and apply a medium boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: false,\n\t\t\t\t\t\t\tboost: 10,\n\t\t\t\t\t\t\twildcard: lunr.Query.wildcard.TRAILING\n\t\t\t\t\t\t});\n\t\t\t\t\t\t// look for terms that match with an edit distance of 1 and apply a small boost\n\t\t\t\t\t\tq.term(v, {\n\t\t\t\t\t\t\tusePipeline: false,\n\t\t\t\t\t\t\teditDistance: 1,\n\t\t\t\t\t\t\tboost: 1\n\t\t\t\t\t\t});\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t\tvar searchResult;\n\t\t\t\tif (thingsFound.length > 1) {\n\t\t\t\t\t// If we had multiple terms, we'll have multiple lists. We filter\n\t\t\t\t\t// them here to use only items that produce returns for all\n\t\t\t\t\t// terms. This spoofs an AND join between terms, which lunr.js can't\n\t\t\t\t\t// yet do internally.\n\t\t\t\t\t// By using the first list of items as master, we get weightings\n\t\t\t\t\t// based on the first term entered, which is more or less\n\t\t\t\t\t// what we would expect.\n\t\t\t\t\tvar searchResult = thingsFound[0];\n\t\t\t\t\tthingsFound = thingsFound.slice(1);\n\t\t\t\t\tfor (var i=searchResult.length-1;i>-1;i--) {\n\t\t\t\t\t\tvar ref = searchResult[i].ref;\n\t\t\t\t\t\tfor (j=0,jlen=thingsFound.length;j<jlen;j++) {\n\t\t\t\t\t\t\tvar otherRefs = {}\n\t\t\t\t\t\t\tfor (var k=0,klen=thingsFound[j].length;k<klen;k++) {\n\t\t\t\t\t\t\t\totherRefs[thingsFound[j][k].ref] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!otherRefs[ref]) {\n\t\t\t\t\t\t\t\tsearchResult = searchResult.slice(0, i).concat(searchResult.slice(i+1));\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (thingsFound.length === 1) {\n\t\t\t\t\t// If we had just one term and one list, return that.\n\t\t\t\t\tsearchResult = thingsFound[0];\n\t\t\t\t} else {\n\t\t\t\t\t// If there was no search result, return an empty list.\n\t\t\t\t\tsearchResult = [];\n\t\t\t\t}\n\n\t\t\t\tvar results \t\t= $(this.results);\n\t\t\t\tvar resultsData \t= [];\n\t\t\t\tif (searchResult.length === 0) {\n\t\t\t\t\tresults.empty();\n\t\t\t\t\tif (this.displaySearchInfo && this.zeroResultsInfo) {\n\t\t\t\t\t\tresults.append(this.format(this.info_template,{\"amount\":0}));\n\t\t\t\t\t}\n\t\t\t\t} else if (this.displaySearchInfo) {\n\t\t\t\t\tif (results.length > 0) {\n\t\t\t\t\t\tresults.children().eq(0).replaceWith(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresults.append(this.format(this.info_template,{\"amount\":searchResult.length}));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(this.before) {\n\t\t\t\t\tthis.before();\n\t\t\t\t};\n\n\t\t\t\t// Get the blogData for the full set, for onComplete\n\t\t\t\tfor (var i = 0; i < searchResult.length; i++) {\n\t\t\t\t\tvar lunrref\t\t= searchResult[i].ref;\n\t\t\t\t\tvar postData  \t= this.blogData[lunrref];\n\t\t\t\t\tif (postData) {\n\t\t\t\t\t\tpostData.ref = lunrref;\n\t\t\t\t\t\tresultsData.push(postData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"ghostHunter: index/data mismatch. Ouch.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Get an array of IDs present in current results\n\t\t\t\tvar listItems = $('.gh-search-item');\n\t\t\t\tvar currentRefs = listItems\n\t\t\t\t\t.map(function(){\n\t\t\t\t\t\treturn this.id.slice(3);\n\t\t\t\t\t}).get();\n\t\t\t\tif (currentRefs.length === 0) {\n\t\t\t\t\tfor (var i=0,ilen=resultsData.length;i<ilen;i++) {\n\t\t\t\t\t\tresults.append(this.format(this.result_template,resultsData[i]));\n\t\t\t\t\t}\n\t\t\t\t\tsettleIDs();\n\t\t\t\t} else {\n\t\t\t\t\t// Get an array of IDs present in searchResult\n\t\t\t\t\tvar newRefs = [];\n\t\t\t\t\tfor (var i=0,ilen=searchResult.length;i<ilen;i++) {\n\t\t\t\t\t\tnewRefs.push(searchResult[i].ref)\n\t\t\t\t\t}\n\t\t\t\t\t// Get the Levenshtein steps needed to transform current into searchResult\n\t\t\t\t\tvar levenshtein = new Levenshtein(currentRefs, newRefs);\n\t\t\t\t\tvar steps = levenshtein.getSteps();\n\t\t\t\t\t// Apply the operations\n\t\t\t\t\tupdateSearchList.call(this, listItems, searchResult, steps);\n\t\t\t\t}\n\t\t\t\t// Tidy up\n\t\t\t\tif(this.onComplete) {\n\t\t\t\t\tthis.onComplete(resultsData);\n\t\t\t\t};\n\t\t\t}.bind(this), 100);\n\t\t},\n\n\t\tclear \t\t\t: function(){\n\t\t\t$(this.results).empty();\n\t\t\tthis.target.val(\"\");\n\t\t},\n\n\t\tformat \t\t\t: function (t, d) {\n\t\t\treturn t.replace(/{{([^{}]*)}}/g, function (a, b) {\n\t\t\t\tvar r = d[b];\n\t\t\t\treturn typeof r === 'string' || typeof r === 'number' ? r : a;\n\t\t\t});\n\t\t}\n\t}\n\n})( jQuery );\n\n/*! lightense-images v1.0.9 | © Tunghsiao Liu | MIT */\n!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof exports?exports.Lightense=t():e.Lightense=t()}(window,function(){return function(n){var r={};function i(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,i),t.l=!0,t.exports}return i.m=n,i.c=r,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,\"a\",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p=\"\",i(i.s=0)}([function(e,t){function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);\"function\"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(e){i(t,e,n[e])})}return t}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e){return(g=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(e)}var n=function(){\"use strict\";var n,y=window,v=document,k={time:300,padding:40,offset:40,keyboard:!0,cubicBezier:\"cubic-bezier(.2, 0, .1, 1)\",background:\"rgba(255, 255, 255, .98)\",zIndex:1e6,beforeShow:void 0,afterShow:void 0,beforeHide:void 0,afterHide:void 0},x={};function o(e){var t=x[e];if(t){if(\"function\"!=typeof t)throw\"config.\".concat(e,\" must be a function!\");Reflect.apply(t,x,[x])}}function r(t){t.src&&!t.classList.contains(\"lightense-target\")&&(t.classList.add(\"lightense-target\"),t.addEventListener(\"click\",function(e){if(x.keyboard&&(e.metaKey||e.ctrlKey))return y.open(t.src,\"_blank\");!function(e){if(x.target=e,x.target.classList.contains(\"lightense-open\"))return s();var n,r,i;o(\"beforeShow\"),x.scrollY=y.scrollY,n=x.target,r=\"transitionend\",i=function(){o(\"afterShow\")},n.addEventListener(r,function e(t){Reflect.apply(i,this,t),n.removeEventListener(r,e)});var t=new Image;t.onload=function(){!function(e){var t=e.width,n=e.height,r=y.pageYOffset||v.documentElement.scrollTop||0,i=y.pageXOffset||v.documentElement.scrollLeft||0,o=x.target.getBoundingClientRect(),a=t/o.width,c=y.innerWidth||v.documentElement.clientWidth||0,s=y.innerHeight||v.documentElement.clientHeight||0,l=x.target.getAttribute(\"data-lightense-padding\")||x.target.getAttribute(\"data-padding\")||x.padding,d=l<c?c-l:c-k.padding,u=l<s?s-l:s-k.padding,g=t/n,f=d/u;x.scaleFactor=t<d&&n<u?a:g<f?u/n*a:d/t*a;var p=c/2,b=r+s/2,h=o.left+i+o.width/2,m=o.top+r+o.height/2;x.translateX=Math.round(p-h),x.translateY=Math.round(b-m)}(this),function(){x.target.classList.add(\"lightense-open\"),x.wrap=v.createElement(\"div\"),x.wrap.className=\"lightense-wrap\",setTimeout(function(){x.target.style.transform=\"scale(\"+x.scaleFactor+\")\"},20),x.target.parentNode.insertBefore(x.wrap,x.target),x.wrap.appendChild(x.target),setTimeout(function(){x.wrap.style.transform=\"translate3d(\"+x.translateX+\"px, \"+x.translateY+\"px, 0)\"},20);var e={cubicBezier:x.target.getAttribute(\"data-lightense-cubic-bezier\")||x.cubicBezier,background:x.target.getAttribute(\"data-lightense-background\")||x.target.getAttribute(\"data-background\")||x.background,zIndex:x.target.getAttribute(\"data-lightense-z-index\")||x.zIndex},t=u({},x,e);c(\"lightense-images-css-computed\",\"\\n    :root {\\n      --lightense-z-index: \".concat(t.zIndex-1,\";\\n      --lightense-backdrop: \").concat(t.background,\";\\n      --lightense-duration: \").concat(t.time,\"ms;\\n      --lightense-timing-func: \").concat(t.cubicBezier,\";\\n      --lightense-backdrop-safari: \").concat(a(t.background),\";\\n    }\")),x.container.style.visibility=\"visible\",setTimeout(function(){x.container.style.opacity=\"1\"},20)}(),y.addEventListener(\"keyup\",d,!1),y.addEventListener(\"scroll\",l,!1),x.container.addEventListener(\"click\",s,!1)},t.src=x.target.src}(this)},!1))}function a(e){var t,n,r=/^#([A-Fa-f0-9]{3}){1,2}$/.test(t=e)?(3===(n=t.substring(1).split(\"\")).length&&(n=[n[0],n[0],n[1],n[1],n[2],n[2]]),\"rgba(\"+[(n=\"0x\"+n.join(\"\"))>>16&255,n>>8&255,255&n].join(\", \")+\", 1)\"):/(rgb\\((?:\\d{1,3}[,)] ?){3}(?:\\d?\\.\\d+\\))?)/.test(t)?t.replace(\")\",\", 1)\"):/(rgba\\((?:\\d{1,3}[,)] ?){3}(?:\\d?\\.\\d+\\))?)/.test(t)?t:k.background,i=/([\\d.]+)\\)$/g,o=i.exec(r)[1];return r.replace(i,.7*o+\")\")}function c(e,t){var n=v.head||v.getElementsByTagName(\"head\")[0];v.getElementById(e)&&v.getElementById(e).remove();var r=v.createElement(\"style\");r.id=e,r.styleSheet?r.styleSheet.cssText=t:r.appendChild(v.createTextNode(t)),n.appendChild(r)}function s(){o(\"beforeHide\"),y.removeEventListener(\"keyup\",d,!1),y.removeEventListener(\"scroll\",l,!1),x.container.removeEventListener(\"click\",s,!1),x.target.classList.remove(\"lightense-open\"),x.wrap.style.transform=\"\",x.target.style.transform=\"\",x.target.classList.add(\"lightense-transitioning\"),x.container.style.opacity=\"\",setTimeout(function(){o(\"afterHide\"),x.container.style.visibility=\"\",x.container.style.backgroundColor=\"\",x.wrap.parentNode.replaceChild(x.target,x.wrap),x.target.classList.remove(\"lightense-transitioning\")},x.time)}function l(){Math.abs(x.scrollY-y.scrollY)>=x.offset&&s()}function d(e){e.preventDefault(),27===e.keyCode&&s()}return function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};n=function(e){switch(g(e)){case\"undefined\":throw\"You need to pass an element!\";case\"string\":return v.querySelectorAll(e);case\"object\":return e}}(e),x=u({},k,t),c(\"lightense-images-css\",\"\\n:root {\\n  --lightense-z-index: \".concat(x.zIndex-1,\";\\n  --lightense-backdrop: \").concat(x.background,\";\\n  --lightense-backdrop-safari: \").concat(a(x.background),\";\\n  --lightense-duration: \").concat(x.time,\"ms;\\n  --lightense-timing-func: \").concat(x.cubicBezier,\";\\n}\\n\\n.lightense-backdrop {\\n  box-sizing: border-box;\\n  width: 100%;\\n  height: 100%;\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  overflow: hidden;\\n  z-index: calc(var(--lightense-z-index) - 1);\\n  padding: 0;\\n  margin: 0;\\n  transition: opacity var(--lightense-duration) ease;\\n  cursor: zoom-out;\\n  opacity: 0;\\n  background-color: var(--lightense-backdrop);\\n  visibility: hidden;\\n}\\n\\n@supports (-webkit-backdrop-filter: blur(30px)) {\\n  .lightense-backdrop {\\n    background-color: var(--lightense-backdrop-safari);\\n    -webkit-backdrop-filter: blur(30px);\\n  }\\n}\\n\\n@supports (backdrop-filter: blur(30px)) {\\n  .lightense-backdrop {\\n    background-color: var(--lightense-backdrop-safari);\\n    backdrop-filter: blur(30px);\\n  }\\n}\\n\\n.lightense-wrap {\\n  position: relative;\\n  transition: transform var(--lightense-duration) var(--lightense-timing-func);\\n  z-index: var(--lightense-z-index);\\n  pointer-events: none;\\n}\\n\\n.lightense-target {\\n  cursor: zoom-in;\\n  transition: transform var(--lightense-duration) var(--lightense-timing-func);\\n  pointer-events: auto;\\n}\\n\\n.lightense-open {\\n  cursor: zoom-out;\\n}\\n\\n.lightense-transitioning {\\n  pointer-events: none;\\n}\")),v.querySelector(\".lightense-backdrop\")||(x.container=v.createElement(\"div\"),x.container.className=\"lightense-backdrop\",v.body.appendChild(x.container)),function(e){var t=e.length;if(t)for(var n=0;n<t;n++)r(e[n]);else r(e)}(n)}}();e.exports=n}])});\n"]}